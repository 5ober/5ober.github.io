<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blankの博客</title>
  
  <subtitle>Keep theme quick starter</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-29T05:58:11.180Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Blank</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cockpit的安装教程</title>
    <link href="http://example.com/2023/03/29/Cockpit%20-%20%E5%9F%BA%E4%BA%8EWeb%E7%9A%84Linux%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2023/03/29/Cockpit%20-%20%E5%9F%BA%E4%BA%8EWeb%E7%9A%84Linux%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2023-03-28T16:00:00.000Z</published>
    <updated>2023-03-29T05:58:11.180Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cockpit-基于Web的Linux管理工具的安装和使用教程"><a href="#Cockpit-基于Web的Linux管理工具的安装和使用教程" class="headerlink" title="Cockpit - 基于Web的Linux管理工具的安装和使用教程"></a>Cockpit - 基于Web的Linux管理工具的安装和使用教程</h3><h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><h4 id="1，什么是-Cockpit？"><a href="#1，什么是-Cockpit？" class="headerlink" title="1，什么是 Cockpit？"></a>1，什么是 Cockpit？</h4><p>（1）<strong>Cockpit</strong> 是一个免费且开源的基于 <strong>web</strong> 的 <strong>Linux</strong> 服务器管理工具并且在 <strong>CentOS 8</strong> 和 <strong>RHEL  8</strong> 中，<strong>Cockpit</strong> 更是成为其默认服务器管理工具。</p><p>（2）通过 <strong>Cockpit</strong> 提供的友好的 <strong>Web</strong> 前端界面可以轻松地监视和管理我们的 <strong>GNU</strong>&#x2F;<strong>Linux</strong> 服务器，执行诸如存储管理、网络配置、检查日志、虚拟机管理等任务。</p><h4 id="2，Cockpit-的功能和特点"><a href="#2，Cockpit-的功能和特点" class="headerlink" title="2，Cockpit 的功能和特点"></a>2，Cockpit 的功能和特点</h4><ul><li><strong>Cockpit</strong> 使用 <strong>systemd</strong> 完成从运行守护进程到服务几乎所有的功能</li><li>集中式管理，通过一个会话窗口管理网络中的所有 <strong>Linux</strong> 服务器</li><li>创建和管理 <strong>KVM</strong>、<strong>oVirt</strong> 虚拟机</li><li>包括 <strong>LVM</strong> 在内的存储配置</li><li>基本的网络配置管理</li><li>用户 <strong>user account</strong> 管理</li><li>基于 <strong>web</strong> 的终端</li><li>图形化的系统性能展示</li><li>使用 <strong>sosreport</strong> 收集系统配置和诊断信息</li><li>支持 <strong>Debian</strong>、<strong>Redhat</strong>、<strong>CentOS</strong>、<strong>Fedora</strong>、<strong>Atomic</strong>、<strong>Arch</strong> <strong>Linux</strong> 和 <strong>Ubuntu</strong></li></ul><p>更多的Cockpit控制台扩展插件请查看官方列表：<a class="link"   href="https://cockpit-project.org/applications.html" >https://cockpit-project.org/applications.html<i class="fas fa-external-link-alt"></i></a></p><h3 id="二、安装配置"><a href="#二、安装配置" class="headerlink" title="二、安装配置"></a>二、安装配置</h3><h4 id="1，安装-dnf"><a href="#1，安装-dnf" class="headerlink" title="1，安装 dnf"></a>1，安装 dnf</h4><p>  我们需要使用 <strong>dnf</strong> 命令安装 <strong>Cockpit</strong>，但 <strong>CentOS 7</strong> 并不包含该命令，需要按照如下步骤进行安装。而对于 <strong>CentOS 8</strong> 自带了 <strong>dnf</strong>，则可以跳过此步骤。</p><p>（1）所以首先执行如下命令安装并启用 <strong>epel-release</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>（2）接着执行如下命令安装 <strong>dnf</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install dnf</span><br></pre></td></tr></table></figure><p>（3）安装完毕后执行如下命令查看是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf --version</span><br></pre></td></tr></table></figure><h4 id="2，安装-Cockpit"><a href="#2，安装-Cockpit" class="headerlink" title="2，安装 Cockpit"></a>2，安装 Cockpit</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装kvm</span><br><span class="line"></span><br><span class="line">yum install qemu-kvm libvirt libvirt-daemon virt-install virt-manager libvirt-dbus</span><br><span class="line">systemctl start libvirtd.service</span><br><span class="line"></span><br><span class="line">注意：如果访问虚拟机，点击虚拟机Create VM按钮是灰色的，就表示没有安装virt-install包</span><br></pre></td></tr></table></figure><p>（1）首先执行如下命令安装 <strong>Cockpit</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install cockpit cockpit-machines</span><br></pre></td></tr></table></figure><p>（2）安装完毕后执行如下命令启动 <strong>Cockpit</strong> 服务并设置为自动启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start cockpit.socket</span><br><span class="line">systemctl enable cockpit.socket</span><br></pre></td></tr></table></figure><p>（3）接着执行如下命令查看是否启动成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status cockpit.socket</span><br></pre></td></tr></table></figure><p>（4）由于 <strong>Cockpit</strong> 默认使用的是 <strong>9090</strong> 端口，执行如下命令打开这个端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=9090/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>  (5) 修改默认端口（可选）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认cockpit使用的是9090端口，所以我这里将9090端口改成9290</span></span><br><span class="line"></span><br><span class="line">sed -i s#9090#9290# /usr/lib/systemd/system/cockpit.socket</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改完成后重启服务并添加开机自启</span></span><br><span class="line"></span><br><span class="line">systemctl restart cockpit.socket</span><br><span class="line">systemctl enable cockpit.socket</span><br></pre></td></tr></table></figure><h4 id="三、使用说明"><a href="#三、使用说明" class="headerlink" title="三、使用说明"></a>三、使用说明</h4><p>浏览器访问 <strong>http:&#x2F;&#x2F;服务器IP:9090</strong>，打开 <strong>Cockpit</strong> 的 <strong>Web</strong> 界面，输入用户密码后登录。</p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230329/Snipaste_2023-03-29_13-38-37.6d0pb3gpjj00.jpg"                      alt="Snipaste_2023-03-29_13-38-37"                ></p><p>登录后首先展示的是系统概览界面，从这里可以快速查看系统的各项信息，如性能使用情况、系统信息、配置等等。</p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230329/Snipaste_2023-03-29_13-39-03.zodpsk8h7ow.jpg"                      alt="Snipaste_2023-03-29_13-39-03"                ></p><h4 id="虚拟机的使用"><a href="#虚拟机的使用" class="headerlink" title="虚拟机的使用"></a>虚拟机的使用</h4><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230329/Snipaste_2023-03-29_13-39-47.7jo8ywffv1s0.jpg"                      alt="Snipaste_2023-03-29_13-39-47"                ></p><h5 id="1、创建网桥"><a href="#1、创建网桥" class="headerlink" title="1、创建网桥"></a>1、创建网桥</h5><p>以前我们都是手动创建桥，有了cockpit直接在页面点一点就创建好了。</p><p>在网络中点击添加网桥，设置名称br0，选择ens192上网的端口，最后点击确定就创建成功了</p><h5 id="2、修改默认kvm存储池"><a href="#2、修改默认kvm存储池" class="headerlink" title="2、修改默认kvm存储池"></a>2、修改默认kvm存储池</h5><p>注意：kvm存储池默认存放在&#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images，也就是说，你所创建的虚拟机会生成在该目录下，建议挂载大磁盘空间，单独存放。</p><p>修改kvm存储池方法有很多种，我这里使用ln软连接来实现，我这里将libvirt整个目录软链存放在&#x2F;data&#x2F;kvm下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/kvm</span><br><span class="line">mv /var/lib/libvirt /data/kvm/</span><br><span class="line">ln -sv /data/kvm/libvirt /var/lib/libvirt</span><br></pre></td></tr></table></figure><h5 id="3、创建镜像目录上传镜像"><a href="#3、创建镜像目录上传镜像" class="headerlink" title="3、创建镜像目录上传镜像"></a>3、创建镜像目录上传镜像</h5><p>我这里单独创建个目录用于存放ISO镜像包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/iso</span><br></pre></td></tr></table></figure><p>我这里上传了一个CentOS-7.9-x86_64-Minimal-2009.iso镜像包</p><h5 id="4、创建虚拟机"><a href="#4、创建虚拟机" class="headerlink" title="4、创建虚拟机"></a>4、创建虚拟机</h5><p>登录web控制台，点击虚拟机，右上角点击Create VM</p><p>接下来就是系统安装的流程了，没什么可讲的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Cockpit-基于Web的Linux管理工具的安装和使用教程&quot;&gt;&lt;a href=&quot;#Cockpit-基于Web的Linux管理工具的安装和使用教程&quot; class=&quot;headerlink&quot; title=&quot;Cockpit - 基于Web的Linux管理工具的安装和使</summary>
      
    
    
    
    <category term="Cockpit安装教程" scheme="http://example.com/categories/Cockpit%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Linux 服务器管理工具Cockpit" scheme="http://example.com/tags/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Cockpit/"/>
    
  </entry>
  
  <entry>
    <title>Webmin的安装和卸载</title>
    <link href="http://example.com/2023/03/29/Webmind%E7%9A%84%20%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD%20/"/>
    <id>http://example.com/2023/03/29/Webmind%E7%9A%84%20%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD%20/</id>
    <published>2023-03-28T16:00:00.000Z</published>
    <updated>2023-03-29T05:58:37.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webmin的安装和卸载"><a href="#Webmin的安装和卸载" class="headerlink" title="Webmin的安装和卸载"></a>Webmin的安装和卸载</h1><p>在centos里安装webmin<br>选择安装最新版本的安装包<br>官方下载路径可以查看下载版本<a class="link"   href="http://download.webmin.com/download/yum/" >http://download.webmin.com/download/yum/<i class="fas fa-external-link-alt"></i></a></p><p>wget <a class="link"   href="http://download.webmin.com/download/yum/webmin-2.021-1.noarch.rpm" >http://download.webmin.com/download/yum/webmin-2.021-1.noarch.rpm<i class="fas fa-external-link-alt"></i></a></p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>如果你的系统没有Perl，那么安装Webmin之前要满足该依赖项。你可能还要在安装Webmin之前安装Encode :: Detect Perl模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install perl-Encode-Detect</span><br><span class="line"></span><br><span class="line">sudo yum -y install openssl perl perl-Net-SSLeay perl-IO-Tty perl-Crypt-SSLeay perl-Encode-Detect autoconf</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh webmin-2.021-1.noarch.rpm </span><br><span class="line">或</span><br><span class="line">rpm -ivh webmin-2.021-1.noarch.rpm --force --nodeps</span><br></pre></td></tr></table></figure><h4 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/webmin/changepass.pl /etc/webmin root test </span><br></pre></td></tr></table></figure><p>webmin的用户名是root，密码为test<br>webmin的配置目录是&#x2F;etc&#x2F;webmin</p><h4 id="如果有安全需要，则更改webmin服务默认端口号"><a href="#如果有安全需要，则更改webmin服务默认端口号" class="headerlink" title="如果有安全需要，则更改webmin服务默认端口号"></a>如果有安全需要，则更改webmin服务默认端口号</h4><p>进入miniserv.conf 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/webmin/miniserv.conf </span><br></pre></td></tr></table></figure><p>修改默认端口号port&#x3D;10000和listen&#x3D;10000为如下即可（自己随便设置端口号）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port=6666</span><br><span class="line">listen=6666</span><br></pre></td></tr></table></figure><h3 id="webmin服务命令"><a href="#webmin服务命令" class="headerlink" title="webmin服务命令"></a>webmin服务命令</h3><p>配置好密码或者端口号后重启下服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">/etc/webmin/restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">/etc/webmin/start </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止</span></span><br><span class="line">/etc/webmin/stop </span><br></pre></td></tr></table></figure><h4 id="防火墙开放端口号"><a href="#防火墙开放端口号" class="headerlink" title="防火墙开放端口号"></a>防火墙开放端口号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">防火墙开放10000端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=10000/tcp --permanent </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新防火墙配置</span></span><br><span class="line">firewall-cmd --reload </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已经开放的端口号</span></span><br><span class="line">firewall-cmd --zone=public --list-ports </span><br></pre></td></tr></table></figure><p>补充关闭不需要开放的端口号，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=10000/tcp --permanent # 补充：防火墙关闭10000端口</span><br></pre></td></tr></table></figure><h3 id="webmin访问登录"><a href="#webmin访问登录" class="headerlink" title="webmin访问登录"></a>webmin访问登录</h3><p>访问http:&#x2F;&#x2F;自己的ip:10000，使用重置后的账号和密码即可登录</p><h3 id="webmin设置中文"><a href="#webmin设置中文" class="headerlink" title="webmin设置中文"></a>webmin设置中文</h3><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230329/Snipaste_2023-03-29_13-43-16.3e7s5lyak8i0.jpg"                      alt="Snipaste_2023-03-29_13-43-16"                ></p><h4 id="安装完成后访问可能遇到的问题"><a href="#安装完成后访问可能遇到的问题" class="headerlink" title="安装完成后访问可能遇到的问题"></a>安装完成后访问可能遇到的问题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR — DOCUMENT FOLLOWS</span><br><span class="line">This web server is running in SSL mode. Try the URL https://cy-ed02-lvs2:10000/ instead.</span><br></pre></td></tr></table></figure><p>解决办法：修改vim &#x2F;etc&#x2F;webmin&#x2F;miniserv.conf里的ssl &#x3D; 1 为 ssl &#x3D; 0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/webmin/miniserv.conf </span><br><span class="line">ssl = 0</span><br></pre></td></tr></table></figure><h4 id="centos卸载webmin"><a href="#centos卸载webmin" class="headerlink" title="centos卸载webmin"></a>centos卸载webmin</h4><p>在升级webmin服务时可先卸载原来的webmin,防止升级时提示错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/webmin/uninstall.sh</span><br></pre></td></tr></table></figure><p>补充：如果还安装了virtualmin可以使用下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">卸载virtualmin的同时会卸载webmin</span></span><br><span class="line">sh install.sh -uninstall </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Webmin的安装和卸载&quot;&gt;&lt;a href=&quot;#Webmin的安装和卸载&quot; class=&quot;headerlink&quot; title=&quot;Webmin的安装和卸载&quot;&gt;&lt;/a&gt;Webmin的安装和卸载&lt;/h1&gt;&lt;p&gt;在centos里安装webmin&lt;br&gt;选择安装最新版本的安</summary>
      
    
    
    
    <category term="webmin安装教程" scheme="http://example.com/categories/webmin%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Linux 服务器管理工具webmin" scheme="http://example.com/tags/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7webmin/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统修改主机名</title>
    <link href="http://example.com/2023/03/28/CentOS7%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2023/03/28/CentOS7%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2023-03-27T16:00:00.000Z</published>
    <updated>2023-03-27T18:14:59.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOS7修改主机名的三种方法"><a href="#CentOS7修改主机名的三种方法" class="headerlink" title="CentOS7修改主机名的三种方法"></a>CentOS7修改主机名的三种方法</h1><p>在CentOS7中，有三种定义的主机名:</p><h4 id="静态的（Static-hostname）"><a href="#静态的（Static-hostname）" class="headerlink" title="静态的（Static hostname）"></a>静态的（Static hostname）</h4><p>“静态”主机名也称为内核主机名，是系统在启动时从&#x2F;etc&#x2F;hostname自动初始化的主机名。</p><h4 id="瞬态的（Tansient-hostname）"><a href="#瞬态的（Tansient-hostname）" class="headerlink" title="瞬态的（Tansient hostname）"></a>瞬态的（Tansient hostname）</h4><p>“瞬态”主机名是在系统运行时临时分配的主机名，例如，通过DHCP或mDNS服务器分配。</p><h4 id="灵活的（Pretty-hostname）"><a href="#灵活的（Pretty-hostname）" class="headerlink" title="灵活的（Pretty hostname）"></a>灵活的（Pretty hostname）</h4><p>“灵活”主机名也有人叫做“别名”主机名。<br>“灵活”主机名则允许使用自由形式（包括特殊&#x2F;空白字符）的主机名，以展示给终端用户（如xh01@f5）。<br>“静态”主机名和“瞬态”主机名都遵从作为互联网域名同样的字符限制规则。</p><p>在CentOS 7中，有个叫<strong>hostnamectl</strong>的命令行工具，它允许你查看或修改与主机名相关的配置。</p><h3 id="查看主机名"><a href="#查看主机名" class="headerlink" title="查看主机名:"></a>查看主机名:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//查看一下当前主机名的情况，查看全部三种主机名</span><br><span class="line">hostnamectl   </span><br><span class="line"></span><br><span class="line">//或者，查看全部三种主机名</span><br><span class="line">hostnamectl status</span><br><span class="line"></span><br><span class="line">//只查看静态、瞬态或灵活主机名，分别使用--static，--transient或--pretty选项</span><br><span class="line">[root@xh00 ~]# hostnamectl --static</span><br><span class="line"></span><br><span class="line">xh00</span><br><span class="line">[root@xh00 ~]# hostnamectl --transient</span><br><span class="line"></span><br><span class="line">xh01</span><br><span class="line">[root@xh00 ~]# hostnamectl --pretty</span><br><span class="line"></span><br><span class="line">//或者，查看到的是瞬态的（Tansient hostname）</span><br><span class="line">hostname</span><br><span class="line"></span><br><span class="line">//或者查看主机名配置文件，查看到的是静态的（Static hostname）</span><br><span class="line">cat /etc/hostname</span><br></pre></td></tr></table></figure><p>查看当前Linux操作系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uname -a//查看到的是瞬态的（Tansient hostname）</span><br><span class="line"></span><br><span class="line">cat /etc/redhat-release//查看操作系统环境</span><br></pre></td></tr></table></figure><h3 id="centos7系统永久更改主机名（hostname）的几种方法"><a href="#centos7系统永久更改主机名（hostname）的几种方法" class="headerlink" title="centos7系统永久更改主机名（hostname）的几种方法"></a>centos7系统永久更改主机名（hostname）的几种方法</h3><p>在使用centos7系统vps或服务器时，一般都会有一个主机名（hostname），都是主机开通时系统默认分配的。虽然主机名的用处不是很大，不更改也没啥事，但如果看着不顺眼的话，也是可以更改的。下面简单介绍下centos7永久更改主机名的简单方法。</p><p>首先查看当前的主机名hostname，方法有两种：</p><p>1、打开一个终端，在命令提示符中可以看到主机名，主机名通常位于“@”符号后；</p><p>2、在终端输入hostname指令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure><p>其次，更改主机名需要root权限，这里切到root账户（用sudo也可以），如果已经是root用户就不用切换了。</p><h4 id="1、方法一：使用hostnamectl命令"><a href="#1、方法一：使用hostnamectl命令" class="headerlink" title="1、方法一：使用hostnamectl命令"></a>1、方法一：使用hostnamectl命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过命令“hostnamectl set-hostname 主机名”来永久修改主机名。</span><br><span class="line"></span><br><span class="line">[root@centos701 ~]# hostnamectl set-hostname CentOS</span><br><span class="line">[root@centos701 ~]# hostname</span><br></pre></td></tr></table></figure><h4 id="2、方法二：修改主机名文件"><a href="#2、方法二：修改主机名文件" class="headerlink" title="2、方法二：修改主机名文件"></a>2、方法二：修改主机名文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">除了方法一，还可以通过修改主机名文件（/etc/hostname）来永久修改主机名。</span><br><span class="line"></span><br><span class="line">[root@centos701 ~]# gedit /etc/hostname</span><br><span class="line">centos701</span><br><span class="line">~</span><br></pre></td></tr></table></figure><p>最后都要重新启动才能生效</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CentOS7修改主机名的三种方法&quot;&gt;&lt;a href=&quot;#CentOS7修改主机名的三种方法&quot; class=&quot;headerlink&quot; title=&quot;CentOS7修改主机名的三种方法&quot;&gt;&lt;/a&gt;CentOS7修改主机名的三种方法&lt;/h1&gt;&lt;p&gt;在CentOS7中，</summary>
      
    
    
    
    <category term="Linux 修改主机名" scheme="http://example.com/categories/Linux-%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D/"/>
    
    
    <category term="Linux 系统修改主机名" scheme="http://example.com/tags/Linux-%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Neofetch终端显示 Linux 系统信息</title>
    <link href="http://example.com/2023/03/28/Neofetch%EF%BC%9A%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%98%BE%E7%A4%BA%20Linux%20%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/"/>
    <id>http://example.com/2023/03/28/Neofetch%EF%BC%9A%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%98%BE%E7%A4%BA%20Linux%20%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</id>
    <published>2023-03-27T16:00:00.000Z</published>
    <updated>2023-03-27T18:15:59.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Neofetch：在终端中显示-Linux-系统信息"><a href="#Neofetch：在终端中显示-Linux-系统信息" class="headerlink" title="Neofetch：在终端中显示 Linux 系统信息"></a>Neofetch：在终端中显示 Linux 系统信息</h1><p>Neofetch 是一个简单但有用的命令行系统信息工具，它用 Bash 编写。它会收集有关系统软硬件的信息，并在终端中显示结果。默认情况下，系统信息将与操作系统的 logo 一起显示。但是，你可以进一步地自定义使用 ascii 图像或其他任何图片。你还可以配置 Neofetch 显示的信息、信息的显示位置和时间。Neofetch 主要用于系统信息的截图。它支持 Linux、BSD、Mac OS X、iOS 和 Windows 操作系统。在这个简短的教程中，让我们看看如何使用 Neofetch 显示 Linux 系统信息。</p><h2 id="安装-Neofetch"><a href="#安装-Neofetch" class="headerlink" title="安装 Neofetch"></a><strong>安装 Neofetch</strong></h2><p>Neofetch 可在大多数 Linux 发行版的默认仓库中找到。</p><p>在 Arch Linux 及其衍生版上，使用这个命令安装它：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S netofetch</span><br></pre></td></tr></table></figure><p>在 Debian（Stretch &#x2F; Sid）上：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install neofetch</span><br></pre></td></tr></table></figure><p>在 Fedora 38 上：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf install neofetch</span><br></pre></td></tr></table></figure><p>在 RHEL、CentOS 上：</p><p>启用 EPEL 仓库：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-relase</span><br></pre></td></tr></table></figure><p>获取 neofetch 仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/konimex-neofetch-epel-7.repo https://copr.fedorainfracloud.org/coprs/konimex/neofetch/repo/epel-7/konimex-neofetch-epel-7.repo</span><br></pre></td></tr></table></figure><p>然后，安装 Neofetch：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install neofetch</span><br></pre></td></tr></table></figure><p>在 Ubuntu  版本上：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install neofetch</span><br></pre></td></tr></table></figure><h2 id="使用-Neofetch-显示-Linux-系统信息"><a href="#使用-Neofetch-显示-Linux-系统信息" class="headerlink" title="使用 Neofetch 显示 Linux 系统信息"></a><strong>使用 Neofetch 显示 Linux 系统信息</strong></h2><p>Neofetch 非常简单直接。让我们看一些例子。</p><p>打开终端，然后运行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ neofetch</span><br></pre></td></tr></table></figure><p>正如你在上面的输出中所看到的，Neofetch 显示了我的 Arch Linux 系统的以下详细信息：</p><ul><li>已安装操作系统的名称，</li><li>笔记本型号，</li><li>内核详细信息，</li><li>系统运行时间，</li><li>默认和其他软件包管理器安装的软件数量</li><li>默认 shell，</li><li>屏幕分辨率，</li><li>桌面环境，</li><li>窗口管理器，</li><li>窗口管理器的主题，</li><li>系统主题，</li><li>系统图标，</li><li>默认终端，</li><li>CPU 类型，</li><li>GPU 类型，</li><li>已安装的内存。</li></ul><p>Neofetch 还有很多其他选项。我们会看到其中一些。</p><p><a class="link"   href="https://zhuanlan.zhihu.com/p/69777438" >Neofetch更多设置参考<i class="fas fa-external-link-alt"></i></a></p><h1 id="CentOS-7-安装-neofetch"><a href="#CentOS-7-安装-neofetch" class="headerlink" title="CentOS 7 安装 neofetch"></a>CentOS 7 安装 neofetch</h1><h2 id="1-为什么要安装-neofetch-？"><a href="#1-为什么要安装-neofetch-？" class="headerlink" title="1. 为什么要安装 neofetch ？"></a><strong>1. 为什么要安装 neofetch ？</strong></h2><ul><li><p>查看系统信息，如系统版本、内核版本、CPU、内存等信息</p></li><li><p>便于截图装X，如下</p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230328/uTools_1679903410524.3bjv6reob4o.jpg"                      alt="uTools_1679903410524"                ></p></li></ul><h2 id="2-安装第一步，去官网查找信息"><a href="#2-安装第一步，去官网查找信息" class="headerlink" title="2. 安装第一步，去官网查找信息"></a><strong>2. 安装第一步，去官网查找信息</strong></h2><ul><li>官网地址可自行百度&#x2F;谷歌，<a class="link"   href="https://link.zhihu.com/?target=https://github.com/dylanaraps/neofetch/wiki/Installation" >https://github.com/dylanaraps/neofetch/wiki/Installation<i class="fas fa-external-link-alt"></i></a></li><li>上述wiki带有不同系统上的安装指南，本文以 CentOS 为例</li><li>所有操作系统自带软件源内无此软件的，安装步骤大致为：添加软件源、导入密钥、刷新包管理器缓存、使用包管理器安装该软件</li></ul><h2 id="3-基于-CentOS-7-的安装步骤如下"><a href="#3-基于-CentOS-7-的安装步骤如下" class="headerlink" title="3. 基于 CentOS 7 的安装步骤如下"></a><strong>3. 基于 CentOS 7 的安装步骤如下</strong></h2><h3 id="3-1-安装-epel-release"><a href="#3-1-安装-epel-release" class="headerlink" title="3.1. 安装 epel-release"></a><strong>3.1. 安装 epel-release</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure><h3 id="3-2-添加第三方软件源"><a href="#3-2-添加第三方软件源" class="headerlink" title="3.2. 添加第三方软件源"></a><strong>3.2. 添加第三方软件源</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/konimex-neofetch-epel-7.repo https://copr.fedorainfracloud.org/coprs/konimex/neofetch/repo/epel-7/konimex-neofetch-epel-7.repo</span><br></pre></td></tr></table></figure><h3 id="3-3-使用包管理器安装-neofetch"><a href="#3-3-使用包管理器安装-neofetch" class="headerlink" title="3.3. 使用包管理器安装 neofetch"></a><strong>3.3. 使用包管理器安装 neofetch</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install neofetch</span><br></pre></td></tr></table></figure><h2 id="Rocky-Linux-EL9-or-EL8-安装Neofetch"><a href="#Rocky-Linux-EL9-or-EL8-安装Neofetch" class="headerlink" title="Rocky Linux EL9 or EL8 安装Neofetch"></a>Rocky Linux EL9 or EL8 安装Neofetch</h2><p>1、更新Rocky Linux</p><p>在安装Neofetch之前，更新软件包列表以确保安装的是最新版本是很重要的。要执行此操作，请打开终端并输入以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf upgrade --refresh</span><br></pre></td></tr></table></figure><p>2、导入EPEL存储库</p><p>在Rocky Linux上导入Extra Packages for Enterprise Linux（EPEL）存储库非常简单。EPEL存储库提供了默认Rocky Linux存储库中未包含的其他软件包。以下命令将演示如何做到这一点，但请确保为Rocky Linux发行版使用正确的命令。</p><p>为Rocky Linux 9导入EPEL</p><p>首先，启用CRB。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf config-manager --set-enabled crb</span><br></pre></td></tr></table></figure><p>3、接下来，使用以下（dnf）terminal命令安装EPEL。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install \</span><br><span class="line"></span><br><span class="line">https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm \</span><br><span class="line"></span><br><span class="line">https://dl.fedoraproject.org/pub/epel/epel-next-release-latest-9.noarch.rpm</span><br></pre></td></tr></table></figure><p>为Rocky Linux 8导入EPEL</p><p>Rocky Linux 8的命令与9的命令相同，只是Enterprise Linux 8版本的路径不同。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install \</span><br><span class="line"></span><br><span class="line">https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm \</span><br><span class="line"></span><br><span class="line">https://dl.fedoraproject.org/pub/epel/epel-next-release-latest-8.noarch.rpm</span><br></pre></td></tr></table></figure><p>4、安装Neofetch</p><p>接下来，我们可以通过输入以下命令来安装Neofetch。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install neofetch -y</span><br></pre></td></tr></table></figure><p>安装后，使用neofetch–version命令验证安装和构建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neofetch --version</span><br></pre></td></tr></table></figure><p>最后，使用以下命令在终端中测试Neofetch。</p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230328/neofetch-command-example-on-rocky-linux-9-or-8.6ha7i2j6b300.jpg"                      alt="neofetch-command-example-on-rocky-linux-9-or-8"                ></p><p>5、其他命令和提示</p><p>更新Neofetch</p><p>Neofetch可以使用标准的更新或升级命令从您的终端进行更新。最好的方法是使用一体式命令全面检查系统的升级情况，如果有Neofetch的话，它将包括在内。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf upgrade --refresh</span><br></pre></td></tr></table></figure><p>删除（卸载）Neofetch</p><p>对于不再希望安装Neofetch的用户，请运行以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf remove neofetch -</span><br></pre></td></tr></table></figure><p>remove命令还将卸载系统上任何未使用的依赖项。</p><p>我建议继续安装EPEL存储库，RHEL克隆的许多软件包都是直接从中导入的，毫无疑问，这在未来会有所帮助。</p><p>结论</p><p>Neofetch是一个在Rocky Linux上显示系统信息的有用工具。安装、更新和删除Neofetch非常简单，如指南中所示，使用命令行终端可以轻松地在Rocky Linux系统上管理Neofetch。</p><p><a class="link"   href="https://www.linuxcapable.com/how-to-install-neofetch-on-rocky-linux/" >参考文档<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Neofetch：在终端中显示-Linux-系统信息&quot;&gt;&lt;a href=&quot;#Neofetch：在终端中显示-Linux-系统信息&quot; class=&quot;headerlink&quot; title=&quot;Neofetch：在终端中显示 Linux 系统信息&quot;&gt;&lt;/a&gt;Neofetch</summary>
      
    
    
    
    <category term="Linux 系统信息终端显示" scheme="http://example.com/categories/Linux-%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%BB%88%E7%AB%AF%E6%98%BE%E7%A4%BA/"/>
    
    
    <category term="Linux 系统信息显示" scheme="http://example.com/tags/Linux-%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E6%98%BE%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>Ubantu远程SSH连接问题</title>
    <link href="http://example.com/2023/03/26/Ubantu%20%E8%BF%9C%E7%A8%8BSSH%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2023/03/26/Ubantu%20%E8%BF%9C%E7%A8%8BSSH%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/</id>
    <published>2023-03-26T13:57:22.740Z</published>
    <updated>2023-03-26T14:13:48.796Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ubantu-远程SSH连接问题"><a href="#Ubantu-远程SSH连接问题" class="headerlink" title="Ubantu 远程SSH连接问题"></a><strong>Ubantu 远程SSH连接问题</strong></h3><p>一、检查是否开启SSH服务</p><p>因为Ubuntu默认是不安装SSH服务的，所以在安装之前可以查看目前系统是否安装，通过以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e |grep ssh</span><br></pre></td></tr></table></figure><p>输出的结果ssh-agent表示ssh-client启动，sshd表示ssh-server启动。我们是需要安装服务端所以应该看是否有sshd，如果没有则说明没有安装。</p><p>二、安装SSH服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-client 客户端</span><br><span class="line">sudo apt-get install openssh-server 服务器</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">apt-get install ssh</span><br></pre></td></tr></table></figure><p>三、启动SSH服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ssh start</span><br></pre></td></tr></table></figure><p>四、修改SSH配置文件</p><p>可以通过SSH配置文件更改包括端口、是否允许root登录等设置，配置文件位置：</p><p> &#x2F;etc&#x2F;ssh&#x2F;sshd_config</p><p>默认是不允许root远程登录的，可以再配置文件开启。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到PermitRootLogin without-password 修改为PermitRootLogin yes （本人遇到过）<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/Snipaste_2023-03-26_20-37-03.5utpxp88ww80.jpg"                      alt="Snipaste_2023-03-26_20-37-03"                ></p><p>五、重启SSH服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure><p>即可通过winscp 、putty使用ROOT权限远程登录。</p><p>启用root用户：sudo passwd root &#x2F;&#x2F;修改密码后就启用了。</p><p>客户端如果是ubuntu的话，则已经安装好ssh client,可以用下面的命令连接远程服务器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Ubantu-远程SSH连接问题&quot;&gt;&lt;a href=&quot;#Ubantu-远程SSH连接问题&quot; class=&quot;headerlink&quot; title=&quot;Ubantu 远程SSH连接问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;Ubantu 远程SSH连接问题&lt;/strong&gt;&lt;/h3&gt;</summary>
      
    
    
    
    <category term="远程SSH连接" scheme="http://example.com/categories/%E8%BF%9C%E7%A8%8BSSH%E8%BF%9E%E6%8E%A5/"/>
    
    
    <category term="Ubantu22.04-LTS" scheme="http://example.com/tags/Ubantu22-04-LTS/"/>
    
  </entry>
  
  <entry>
    <title>WSL设置静态IP</title>
    <link href="http://example.com/2023/03/25/WSL%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/"/>
    <id>http://example.com/2023/03/25/WSL%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/</id>
    <published>2023-03-25T11:58:50.626Z</published>
    <updated>2023-03-25T18:35:54.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WSL设置静态IP"><a href="#WSL设置静态IP" class="headerlink" title="WSL设置静态IP"></a>WSL设置静态IP</h2><p>微软终于更新了 WSL2，允许用户自行指定用于 WSL2 的网卡，因此不再需要任何的脚本等等即可固定 WSL2 地址甚至支持 IPv6 和外部访问。</p><p>注意：此方法需要至少 Windows 11 22H2。</p><h5 id="首先需要从-Microsoft-Store-里面下载最新的-Windows-Subsystem-for-Linux。"><a href="#首先需要从-Microsoft-Store-里面下载最新的-Windows-Subsystem-for-Linux。" class="headerlink" title="首先需要从 Microsoft Store 里面下载最新的 Windows Subsystem for Linux。"></a>首先需要从 Microsoft Store 里面下载最新的 Windows Subsystem for Linux。</h5><p>用不了商店的可以前往这里自己下载 msixbundle 部署安装：<a class="link"   href="https://link.zhihu.com/?target=https://github.com/microsoft/WSL/releases" >https://github.com/microsoft/WSL/releases<i class="fas fa-external-link-alt"></i></a></p><p>装好之后可以运行 <code>wsl --version</code> 确认一下是不是 1.0 以上。</p><p>然后在用户目录 <code>%USERPROFILE%</code> 下面创建一个配置文件 <code>.wslconfig</code>，按照如下配置方法设置网络，例如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[wsl2]</span></span><br><span class="line"><span class="attr">networkingMode</span>=bridged <span class="comment"># 桥接模式</span></span><br><span class="line"><span class="attr">vmSwitch</span>=WSLBridge <span class="comment"># 你想使用的网卡</span></span><br><span class="line"><span class="attr">ipv6</span>=<span class="literal">true</span> <span class="comment"># 启用 IPv6[wsl2]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown &amp;&amp; wsl</span><br></pre></td></tr></table></figure><p>重启 WSL2，搞定</p><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --version</span><br><span class="line"><span class="comment"># 版本&gt;1.0即可</span></span><br></pre></td></tr></table></figure><p>如果出错，请<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/install" >安装最新版本<i class="fas fa-external-link-alt"></i></a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>.wslconfig<br>用于在 WSL 2 上运行的所有已安装分发版 <strong>全局</strong> 配置设置。</p><p>wsl.conf<br>为 WSL 1 或 WSL 2 上运行的 Linux 发行版配置 每个分发 版的设置。</p><p>这里详细配置介绍请移步 <a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config" >高级设置配置<i class="fas fa-external-link-alt"></i></a></p><h2 id="配置WSL2使用外部网络"><a href="#配置WSL2使用外部网络" class="headerlink" title="配置WSL2使用外部网络"></a>配置WSL2使用外部网络</h2><p>使用Hyper-V创建外部网络（其他方式创建也行）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网络交换机名称</span></span><br><span class="line"><span class="built_in">Get-VMSwitch</span> <span class="literal">-SwitchType</span> External</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/uTools_1679587233100.6blp5g6ezac0.jpg"                      alt="uTools_1679587233100"                ></p><p>配置 .wslconfig<br>存储在目录中 %UserProfile%，或者 PowerShell 中使用 cd ~ 访问主目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">networkingMode=bridge</span><br><span class="line">vmSwitch=WSL_Bridge</span><br><span class="line">ipv6=true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">dhcp=<span class="literal">false</span></span></span><br><span class="line">memory=8GB</span><br><span class="line">processors=4</span><br><span class="line">localhostforwarding=true</span><br><span class="line">debugConsole=false</span><br><span class="line">guiApplications=true</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启 WSL2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br><span class="line">wsl</span><br><span class="line">ip a</span><br></pre></td></tr></table></figure><p>​       可以看到eth0的网络是桥接网络了</p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/Snipaste_2023-03-25_17-27-51.1o5xgami6rds.jpg"                      alt="Snipaste_2023-03-25_17-27-51"                ></p><p>修改DNS禁止自动生成</p><p>添加 <code>/etc/wsl.conf</code> 加入以下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[boot]</span></span><br><span class="line"><span class="comment"># 启用systemctl命令</span></span><br><span class="line"><span class="attr">systemd</span>=<span class="literal">true</span></span><br><span class="line"><span class="section">[network]</span></span><br><span class="line"><span class="comment"># 取消自动生成resolv.conf文件，这个是关键点</span></span><br><span class="line"><span class="attr">generateResolvConf</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment"># 设置虚拟主机的名称，默认的不好看</span></span><br><span class="line"><span class="comment">#hostname = </span></span><br><span class="line"><span class="section">[user]</span></span><br><span class="line"><span class="comment"># 启动的默认用户，设为root吧，不然以后命令都要加sudo有点麻烦</span></span><br><span class="line"><span class="attr">default</span> = root</span><br></pre></td></tr></table></figure><p>先删除再创建，因为resolv.conf是软链接创建的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /etc/resolv.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;nameserver 223.5.5.5&quot;</span> &gt; /etc/resolv.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># DNS</span></span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 223.5.5.5</span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><p>重启WSL2 (wsl –shutdown)</p><p>而且还启用了<code>systemd</code> (systemctl 命令回来了)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files --<span class="built_in">type</span>=service</span><br><span class="line"></span><br><span class="line">systemctl restart systemd-networkd</span><br><span class="line">systemctl <span class="built_in">enable</span> systemd-networkd</span><br><span class="line">systemctl restart systemd-resolved.service</span><br><span class="line">systemctl <span class="built_in">enable</span> systemd-resolved.service</span><br></pre></td></tr></table></figure><h2 id="设置特定静态IP-本人设置后ping不通"><a href="#设置特定静态IP-本人设置后ping不通" class="headerlink" title="设置特定静态IP [本人设置后ping不通]"></a>设置特定静态IP [本人设置后ping不通]</h2><p>修改 .wslconfig</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[wsl2]</span></span><br><span class="line"><span class="attr">networkingMode</span>=bridged</span><br><span class="line"><span class="attr">vmSwitch</span>=WSL_external</span><br><span class="line"><span class="attr">dhcp</span>=<span class="literal">false</span> <span class="comment"># 禁止动态分配</span></span><br><span class="line"><span class="attr">ipv6</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>当<code>dhcp=false</code>时会读取 <code>cd /lib/systemd/network/wsl_external.network</code> 的网络配置</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim wsl_external.network 加入以下内容</span><br><span class="line"></span><br><span class="line"><span class="section">[Match]</span></span><br><span class="line"><span class="attr">Name</span>=eth0</span><br><span class="line"><span class="section">[Network]</span></span><br><span class="line"><span class="attr">Description</span>=bridge</span><br><span class="line"><span class="attr">DHCP</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">Address</span>=<span class="number">192.168</span>.<span class="number">1.10</span>/<span class="number">24</span> <span class="comment"># 自行修改</span></span><br><span class="line"><span class="attr">Gateway</span>=<span class="number">192.168</span>.<span class="number">0.1</span> <span class="comment"># 自行修改</span></span><br></pre></td></tr></table></figure><p>重启WSL2 (wsl –shutdown)<br>你会发现eth0已经有自定义的网络了</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://zhuanlan.zhihu.com/p/593263088" >WSL2 网络的最终解决方案 - 知乎 (zhihu.com)<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://zhuanlan.zhihu.com/p/60004296" >WSL2远程连接SSH1<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.cnblogs.com/lic0914/p/17003251.html" >WSL使用桥接网络指定IP<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://zhuanlan.zhihu.com/p/600042961" >安装WSL2并下载配置Ubuntu<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WSL设置静态IP&quot;&gt;&lt;a href=&quot;#WSL设置静态IP&quot; class=&quot;headerlink&quot; title=&quot;WSL设置静态IP&quot;&gt;&lt;/a&gt;WSL设置静态IP&lt;/h2&gt;&lt;p&gt;微软终于更新了 WSL2，允许用户自行指定用于 WSL2 的网卡，因此不再需要任何的</summary>
      
    
    
    
    <category term="WSL设置静态IP" scheme="http://example.com/categories/WSL%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/"/>
    
    
    <category term="WSL设置静态IP" scheme="http://example.com/tags/WSL%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/"/>
    
  </entry>
  
  <entry>
    <title>WSL安装图形界面xfce4</title>
    <link href="http://example.com/2023/03/25/WSL%E5%AE%89%E8%A3%85%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83xfce4/"/>
    <id>http://example.com/2023/03/25/WSL%E5%AE%89%E8%A3%85%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83xfce4/</id>
    <published>2023-03-25T11:58:50.623Z</published>
    <updated>2023-03-25T18:41:54.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WSL安装图形界面xfce4"><a href="#WSL安装图形界面xfce4" class="headerlink" title="WSL安装图形界面xfce4"></a>WSL安装图形界面xfce4</h1><p>最近想在WSL2里安装一个可视化图形界面，之前装过vcXsrv这种方案，不过最近打不开了，也是尝试了Vnc server 不过容易灰屏，最后在vcXsrv ，Vnc server和 xrdp这3种方案中最终选择了xrdp这种方案，利用Windows的远程连接来连接xfce4桌面</p><h4 id="更新升级软件-可选"><a href="#更新升级软件-可选" class="headerlink" title="更新升级软件 (可选)"></a>更新升级软件 (可选)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h4 id="安装桌面环境xfce4"><a href="#安装桌面环境xfce4" class="headerlink" title="安装桌面环境xfce4"></a>安装桌面环境xfce4</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xfce4 xfce4-goodies</span><br></pre></td></tr></table></figure><p><strong>注: <font color=red>display manager</font>选择 <font color=red>gdm3</font> 或<font color=red> lightdm </font>均可。</strong></p><h4 id="设置系统语言"><a href="#设置系统语言" class="headerlink" title="设置系统语言"></a>设置系统语言</h4><p>默认情况下，Linux是没有中文语言包的。我们需要手动下载语言包并配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装中文字体</span></span><br><span class="line">sudo apt-get install ttf-wqy-zenhei</span><br></pre></td></tr></table></figure><p>之后，我们设置系统的语言：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置系统语言</span></span><br><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>方向键找到中文后<font color=red>zh_CN,UTF-8 UTF-8</font>，按空格：</p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260039799.1ipe817m74ww.jpg"                      alt="202303260039799"                ></p><p>之后再回车确认，然后选择中文：<font color=red>zh_CN,UTF-8 </font></p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260039597.d0b7i1sk4a8.jpg"                      alt="202303260039597"                ></p><h4 id="安装远程桌面服务xrdp"><a href="#安装远程桌面服务xrdp" class="headerlink" title="安装远程桌面服务xrdp"></a><strong>安装远程桌面服务</strong>xrdp</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure><h4 id="修改配置文件xrdp-ini"><a href="#修改配置文件xrdp-ini" class="headerlink" title="修改配置文件xrdp.ini"></a>修改配置文件xrdp.ini</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制一份备用</span></span><br><span class="line">sudo cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.bak</span><br></pre></td></tr></table></figure><h4 id="配置端口-3389-改为-3390，避免和windows的端口冲突"><a href="#配置端口-3389-改为-3390，避免和windows的端口冲突" class="headerlink" title="配置端口 3389 改为 3390，避免和windows的端口冲突"></a>配置端口 3389 改为 3390，避免和windows的端口冲突</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &#x27;s/3389/3390/g&#x27; /etc/xrdp/xrdp.ini</span><br></pre></td></tr></table></figure><h4 id="max-bpp-x3D-32-修改为-128（最大位图深度）"><a href="#max-bpp-x3D-32-修改为-128（最大位图深度）" class="headerlink" title="max_bpp&#x3D;32 修改为 128（最大位图深度）"></a>max_bpp&#x3D;32 修改为 128（最大位图深度）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &#x27;s/max_bpp=32/#max_bbp=32\nmax_bpp=128/g&#x27; /etc/xrdp/xrdp.ini</span><br></pre></td></tr></table></figure><h4 id="xserverbpp-x3D-24-修改为-128，取消注释"><a href="#xserverbpp-x3D-24-修改为-128，取消注释" class="headerlink" title="xserverbpp&#x3D;24 修改为 128，取消注释"></a>xserverbpp&#x3D;24 修改为 128，取消注释</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &#x27;s/xservervpp=24/#xservervpp=24\nxserverbpp=128/g&#x27; /etc/xrdp/xrdp.ini</span><br></pre></td></tr></table></figure><h4 id="新增配置文件-xsession"><a href="#新增配置文件-xsession" class="headerlink" title="新增配置文件.xsession"></a>新增配置文件.xsession</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">告诉系统: 开启桌面环境的时候用xfce4-session</span></span><br><span class="line">sudo echo xfce4-session &gt; ~/.xsession</span><br></pre></td></tr></table></figure><h4 id="配置sesman-ini"><a href="#配置sesman-ini" class="headerlink" title="配置sesman.ini"></a>配置sesman.ini</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/xrdp/sesman.ini</span><br></pre></td></tr></table></figure><p>将 <strong><font color=red>KillDisconnected</font></strong> 的值修改为 **<font color=red>true</font>**保存退出</p><h4 id="修改配置startwm-sh"><a href="#修改配置startwm-sh" class="headerlink" title="修改配置startwm.sh"></a>修改配置startwm.sh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/xrdp/startwm.sh</span><br></pre></td></tr></table></figure><p><strong>注释掉末尾亮行，并添加一行 <font color=red>startxfce4</font></strong> </p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260040932.6swz4mq9ick0.jpg"                      alt="202303260040932"                ></p><h4 id="启用-xrdp-服务"><a href="#启用-xrdp-服务" class="headerlink" title="启用 xrdp 服务"></a>启用 xrdp 服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/xrdp start</span><br></pre></td></tr></table></figure><h3 id="远程桌面链接"><a href="#远程桌面链接" class="headerlink" title="远程桌面链接"></a>远程桌面链接</h3><p>按下 <strong>Windows+R</strong> 键，输入 <strong>mstsc</strong> 打开远程桌面连接</p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260040033.5dw48sun3ts.jpg"                      alt="202303260040033"                ></p><p>IP为本机即 localhost，端口为配置的<strong>3390</strong>，IP 也可以使用 ip a 或 ifconfig命令查到的 eth0 inet 地址</p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260040872.50b5o6ruz8s0.jpg"                      alt="202303260040872"                ></p><p>连接后进入登录页面，用户名和密码填写 WSL 的用户名和密码。注：不要使用 <strong>root</strong>用户登录</p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260040129.2k694if582u0.jpg"                      alt="202303260040129"                ></p><p>登录成功进入xfce4桌面</p><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260041097.701kmlgg8yo0.jpg"                      alt="202303260041097"                ></p><h4 id="停止-xrdp-服务"><a href="#停止-xrdp-服务" class="headerlink" title="停止 xrdp 服务"></a>停止 xrdp 服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/xrdp stop</span><br></pre></td></tr></table></figure><p>不使用时执行停止命令就行</p><h4 id="卸载-xrdp-服务"><a href="#卸载-xrdp-服务" class="headerlink" title="卸载 xrdp 服务"></a>卸载 xrdp 服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge xrdp</span><br></pre></td></tr></table></figure><p><strong><a class="link"   href="https://blog.csdn.net/w47_csdn/article/details/129107705" >参考 Xrdp 方式连接<i class="fas fa-external-link-alt"></i></a></strong></p><p><strong><a class="link"   href="https://www.mintimate.cn/2021/05/15/installVNC/#%F0%9F%98%8B%E5%88%9D%E5%A7%8B%E5%8C%96tightvncserver" >参考VNC server方式连接<i class="fas fa-external-link-alt"></i></a></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WSL安装图形界面xfce4&quot;&gt;&lt;a href=&quot;#WSL安装图形界面xfce4&quot; class=&quot;headerlink&quot; title=&quot;WSL安装图形界面xfce4&quot;&gt;&lt;/a&gt;WSL安装图形界面xfce4&lt;/h1&gt;&lt;p&gt;最近想在WSL2里安装一个可视化图形界面，之</summary>
      
    
    
    
    <category term="WSL图形界面xfce4" scheme="http://example.com/categories/WSL%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2xfce4/"/>
    
    
    <category term="WSL图形界面xfce4" scheme="http://example.com/tags/WSL%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2xfce4/"/>
    
  </entry>
  
  <entry>
    <title>Docker 搭建私服仓库</title>
    <link href="http://example.com/2023/03/25/Docker-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%8D%E4%BB%93%E5%BA%93/"/>
    <id>http://example.com/2023/03/25/Docker-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%8D%E4%BB%93%E5%BA%93/</id>
    <published>2023-03-25T11:57:27.091Z</published>
    <updated>2023-03-25T18:29:55.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-搭建私服仓库"><a href="#Docker-搭建私服仓库" class="headerlink" title="Docker 搭建私服仓库"></a>Docker 搭建私服仓库</h1><p>最近想搭建一个属于自己的私服仓库，目前人们普遍使用的有GitLab、Gogs、Gitea、Gitblit 这几个比较常用，GitLab主要公司用的比较多，功能也比较全面，但是比较占用内存，我安装完又给卸载了，如果你内存比较大使用也挺好，Gogs是基于Go语言开发的，跨平台性也挺好，Windows、Linux、Mac端也都有，比较轻量级，安装包也比较小，占用内存最少，Gitea和Gogs之前是一个团队，因为意向不同分开了，也是基于Gogs的分支开发的，界面有些类似但是功能目前比Gogs多，个人觉得还是比较好用的，Gitblit 之前我也使用过不过当时是在Windows端安装的，Gitblit是基于Java语言开发的，跨平台性也比较好，各个平台也都有，用着还不错不过和这几个对比一下，总觉的图形界面不够美观，目前感觉使用的人不是太多了，对比而言个人使用的话还是比较推荐Gogs和Gitea，我目前会使用Gitea，相对于Gogs的内存占用也不是太多，功能还比较全面！</p><h3 id="1-安装gogs"><a href="#1-安装gogs" class="headerlink" title="1.安装gogs"></a>1.安装gogs</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要创建 gogs 数据库</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull gogs/gogs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建映射文件目录</span></span><br><span class="line">mkdir -p /var/gogs</span><br><span class="line"></span><br><span class="line">docker run --name=gogs --restart always -p 122:22 -p 3000:3000 -v /var/gogs:/data gogs/gogs</span><br><span class="line"></span><br><span class="line">docker start gogs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">踩坑记录 切记http 要填写3000端口 不要更改，不然无法访问</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/4fc497e048ae4888adf4d0c0caf55821.65q01cj2ayg0.webp"                      alt="4fc497e048ae4888adf4d0c0caf55821"                ></p><h3 id="2-安装gitea"><a href="#2-安装gitea" class="headerlink" title="2.安装gitea"></a>2.安装gitea</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要创建 gitea 数据库</span> </span><br><span class="line">docker pull gitea/gitea</span><br><span class="line"></span><br><span class="line">mkdir -p /var/gitea</span><br><span class="line"></span><br><span class="line">docker run -d --name=gitea --restart always -p 121:22 -p 3000:3000 -v /var/gitea:/data gitea/gitea</span><br><span class="line"></span><br><span class="line">docker start gitea</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">踩坑记录 切记http 要填写3000端口 不要更改，不然无法访问</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260026608.4e4pnz1nj860.webp"                      alt="202303260026608"                ></p><h3 id="3-安装gitblit"><a href="#3-安装gitblit" class="headerlink" title="3.安装gitblit"></a>3.安装gitblit</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitblit/gitblit:rpc</span><br><span class="line"></span><br><span class="line">mkdir -p /var/gitblit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https访问</span></span><br><span class="line">docker run -d --name gitblit -p 8443:8443 -p 29418:29418 -v /var/gitblit:/data gitblit/gitblit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https和http访问</span></span><br><span class="line">docker run -d --name gitblit --restart always -p 8180:8080 -p 8443:8443 -p 9418:9418 -p 29418:29418 -v /var/gitblit:/data gitblit/gitblit</span><br><span class="line"></span><br><span class="line">docker start gitblit</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260102544.13qayufmyzsw.webp"                      alt="202303260102544"                ></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run --name mysql5.7 -p 13306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-搭建私服仓库&quot;&gt;&lt;a href=&quot;#Docker-搭建私服仓库&quot; class=&quot;headerlink&quot; title=&quot;Docker 搭建私服仓库&quot;&gt;&lt;/a&gt;Docker 搭建私服仓库&lt;/h1&gt;&lt;p&gt;最近想搭建一个属于自己的私服仓库，目前人们普遍使用的</summary>
      
    
    
    
    <category term="Gogs Gitea Gitblit" scheme="http://example.com/categories/Gogs-Gitea-Gitblit/"/>
    
    
    <category term="Gogs Gitea Gitblit 部署" scheme="http://example.com/tags/Gogs-Gitea-Gitblit-%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>gitlab 域名与克隆地址</title>
    <link href="http://example.com/2023/03/22/GitLab%20%E5%9F%9F%E5%90%8D%E4%B8%8E%E5%85%8B%E9%9A%86%E5%9C%B0%E5%9D%80%E4%B8%8D%E4%B8%80%E8%87%B4%E4%BF%AE%E6%94%B9/"/>
    <id>http://example.com/2023/03/22/GitLab%20%E5%9F%9F%E5%90%8D%E4%B8%8E%E5%85%8B%E9%9A%86%E5%9C%B0%E5%9D%80%E4%B8%8D%E4%B8%80%E8%87%B4%E4%BF%AE%E6%94%B9/</id>
    <published>2023-03-22T03:09:28.783Z</published>
    <updated>2023-03-22T03:07:19.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gitlab-域名与克隆地址不一致修改"><a href="#gitlab-域名与克隆地址不一致修改" class="headerlink" title="gitlab 域名与克隆地址不一致修改"></a>gitlab 域名与克隆地址不一致修改</h2><h4 id="1-gitlab替换https"><a href="#1-gitlab替换https" class="headerlink" title="1.gitlab替换https"></a>1.gitlab替换https</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置gitlab替换https://域名 ,如：&#x27;https://xxx.com&#x27;</span></span><br><span class="line">vim /etc/gitlab/gitlab.rb   </span><br><span class="line"><span class="comment">#打开配置文件</span></span><br><span class="line">external_url <span class="string">&#x27;external_url &#x27;</span>https://192.168.1.12:8089<span class="string">&#x27;  # 注：一定要HTTPS</span></span><br></pre></td></tr></table></figure><h4 id="2-添加ssl-证书"><a href="#2-添加ssl-证书" class="headerlink" title="2.添加ssl 证书"></a>2.添加ssl 证书</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个ssl文件 把申请的证书放在这个文件夹里</span></span><br><span class="line"><span class="built_in">mkdir</span> /etc/gitlab/ssl  </span><br><span class="line"><span class="comment">#打开配置文件</span></span><br><span class="line">vim  /etc/gitlab/gitlab.rb  </span><br><span class="line"><span class="comment">#取消注释改为 true</span></span><br><span class="line">nginx[<span class="string">&#x27;redirect_http_to_https&#x27;</span>]= <span class="literal">true</span></span><br><span class="line"><span class="comment">#放置对应的证书名称</span></span><br><span class="line">nginx[<span class="string">&#x27;ssl_certificate&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/xxxx.crt&quot;</span>  </span><br><span class="line"><span class="comment">#放置对应的证书名称</span></span><br><span class="line">nginx[<span class="string">&#x27;ssl_certificate_key&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/xxxx.key&quot;</span> </span><br><span class="line"><span class="comment">#使配置生效</span></span><br><span class="line">gitlab-ctl reconfigure </span><br></pre></td></tr></table></figure><h4 id="3-修改clone-地址"><a href="#3-修改clone-地址" class="headerlink" title="3.修改clone 地址"></a>3.修改clone 地址</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /var/opt/gitlab/gitlab-rails/etc/gitlab.yml  <span class="comment">#打开配置文件，参考图修改后重启</span></span><br><span class="line">gitlab-ctl restart  <span class="comment"># 重起生效 # </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;gitlab-域名与克隆地址不一致修改&quot;&gt;&lt;a href=&quot;#gitlab-域名与克隆地址不一致修改&quot; class=&quot;headerlink&quot; title=&quot;gitlab 域名与克隆地址不一致修改&quot;&gt;&lt;/a&gt;gitlab 域名与克隆地址不一致修改&lt;/h2&gt;&lt;h4 i</summary>
      
    
    
    
    <category term="SSL认证" scheme="http://example.com/categories/SSL%E8%AE%A4%E8%AF%81/"/>
    
    
    <category term="SSL认证" scheme="http://example.com/tags/SSL%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>Linux 配置 JDK Maven 环境变量</title>
    <link href="http://example.com/2023/03/22/%E9%85%8D%E7%BD%AEMaven%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://example.com/2023/03/22/%E9%85%8D%E7%BD%AEMaven%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</id>
    <published>2023-03-21T19:13:04.673Z</published>
    <updated>2023-03-21T19:14:14.378Z</updated>
    
    <content type="html"><![CDATA[<p>使用命令 <strong>java</strong> 、<strong>javac</strong> 、 <strong>java -version</strong> 来查看是否安装了JDK</p><p>rpm -qa | grep java 或 rpm -qa | grep jdk <strong>命令来查询出系统自带的jdk（蓝框的四个就是系统自带的）注：其余的不要删</strong></p><p>然后通过    rpm -e –nodeps   后面跟系统自带的jdk名    这个命令来删除系统自带的jdk，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载 CentOS 7.9 自带JDK</span></span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.262.b10-1.el7.x86_64</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.261-2.6.22.2.el7_8.x86_64</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.262.b10-1.el7.x86_64</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.261-2.6.22.2.el7_8.x86_64</span><br></pre></td></tr></table></figure><h4 id="配置Java环境变量"><a href="#配置Java环境变量" class="headerlink" title="配置Java环境变量"></a>配置Java环境变量</h4><p>解压下载好的JDK安装包<br>解压路径：&#x2F;usr&#x2F;local&#x2F;java&#x2F;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置Java环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.8.0_221</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> JAVA_PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;JRE_HOME&#125;</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;JAVA_PATH&#125;</span></span><br></pre></td></tr></table></figure><h4 id="配置Maven环境变量"><a href="#配置Maven环境变量" class="headerlink" title="配置Maven环境变量"></a>配置Maven环境变量</h4><p>解压下载好的maven安装包<br>解压路径：&#x2F;usr&#x2F;local&#x2F;maven&#x2F;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Maven环境变量</span></span><br><span class="line"></span><br><span class="line">export MAVEN_HOME=/usr/local/maven/apache-maven-3.9.0</span><br><span class="line">export PATH=$&#123;MAVEN_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><h4 id="Linux：-解决每次重启机器环境变量都需要-source-x2F-etc-x2F-profile-才生效"><a href="#Linux：-解决每次重启机器环境变量都需要-source-x2F-etc-x2F-profile-才生效" class="headerlink" title="Linux： 解决每次重启机器环境变量都需要 source &#x2F;etc&#x2F;profile 才生效"></a>Linux： 解决每次重启机器环境变量都需要 source &#x2F;etc&#x2F;profile 才生效</h4><ul><li><a class="link"   href="https://blog.csdn.net/qq_41538097/article/details/107110230#1bashrc_6" >1、将环境变量配置在~&#x2F;.bashrc里面。<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/qq_41538097/article/details/107110230#2bashrcsource_etcprofile_24" >2、在~&#x2F;.bashrc里面加一句source &#x2F;etc&#x2F;profile<i class="fas fa-external-link-alt"></i></a></li></ul><p>.bashrc 文件说明：bash 在每次启动时都会自动载入 bashrc 配置文件中的内容，.bashrc 文件可以执行一些命令以及脚本，有以下两种解决方法解决每次重启机器环境变量都需要 source &#x2F;etc&#x2F;profile 才生效</p><h5 id="1、将环境变量配置在-x2F-bashrc里面。"><a href="#1、将环境变量配置在-x2F-bashrc里面。" class="headerlink" title="1、将环境变量配置在~&#x2F;.bashrc里面。"></a>1、将环境变量配置在~&#x2F;.bashrc里面。</h5><p>~代表当前用户目录，我是root用户登录的，如可以使用如下命令进入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /root/.bashrc</span><br><span class="line">或</span><br><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure><h5 id="2-添加环境变量"><a href="#2-添加环境变量" class="headerlink" title="2.添加环境变量"></a>2.添加环境变量</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置Java环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.8.0_221</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> JAVA_PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;JRE_HOME&#125;</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;JAVA_PATH&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用命令 &lt;strong&gt;java&lt;/strong&gt; 、&lt;strong&gt;javac&lt;/strong&gt; 、 &lt;strong&gt;java -version&lt;/strong&gt; 来查看是否安装了JDK&lt;/p&gt;
&lt;p&gt;rpm -qa | grep java 或 rpm -qa | gr</summary>
      
    
    
    
    <category term="JDK Maven 环境变量" scheme="http://example.com/categories/JDK-Maven-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
    
    <category term="JDK Maven 环境变量" scheme="http://example.com/tags/JDK-Maven-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>安装Jenkins 的方式</title>
    <link href="http://example.com/2023/03/22/%E5%AE%89%E8%A3%85Jenkins-%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2023/03/22/%E5%AE%89%E8%A3%85Jenkins-%E7%9A%84%E6%96%B9%E5%BC%8F/</id>
    <published>2023-03-21T19:13:04.671Z</published>
    <updated>2023-03-25T18:55:13.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Jenkins-的方式"><a href="#安装Jenkins-的方式" class="headerlink" title="安装Jenkins 的方式"></a>安装Jenkins 的方式</h1><p>Jenkins 是一个可扩展的持续集成（CI）平台。它只是一个平台，真正运作的都是插件。<br>Jenkins的主要作用：持续的监控软件版本发布&#x2F;测试项目。<br>监控外部定时调用执行的工作。</p><p><strong>接下来记录一下所踩得的坑 !</strong></p><h3 id="1-Docker安装"><a href="#1-Docker安装" class="headerlink" title="1.Docker安装"></a>1.Docker安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Linux本地目录并赋权</span></span><br><span class="line"></span><br><span class="line">mkdir -p /var/jenkins_data</span><br><span class="line">chmod 777 /var/jenkins_data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像 目前  对应 jenkins 官方 2.332.3</span></span><br><span class="line"></span><br><span class="line">docker pull jenkinsci/blueocean:1.25.3   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对应 jenkins 官方 2.346.1 LTS 支持JDK8-11-17</span> </span><br><span class="line"></span><br><span class="line">docker pull jenkinsci/blueocean:1.25.5   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一定要挂载Maven和JDK8 自带JDK11也可以用</span></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">  -u root \</span><br><span class="line">  -d \</span><br><span class="line">  --name jenkins \</span><br><span class="line">  --restart always \</span><br><span class="line">  -p 8090:8080 \</span><br><span class="line">  -p 8091:50000 \</span><br><span class="line">  -v /var/jenkins_data:/var/jenkins_home \</span><br><span class="line">  -v /usr/local/java/jdk1.8.0_221:/usr/local/java/jdk1.8.0_221 \</span><br><span class="line">  -v /usr/local/maven/apache-maven-3.9.0:/usr/local/maven/apache-maven-3.9.0 \</span><br><span class="line">   jenkinsci/blueocean:1.25.5</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260100237.1ln1ov5u5ygw.jpg"                      alt="202303260100237"                ></p><h3 id="Docker安装第一次需要进入容器才能获取密码"><a href="#Docker安装第一次需要进入容器才能获取密码" class="headerlink" title="Docker安装第一次需要进入容器才能获取密码"></a>Docker安装第一次需要进入容器才能获取密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260100692.7l264u4ylho0.jpg"                      alt="202303260100692"                ></p><h3 id="接下来登录安装插件"><a href="#接下来登录安装插件" class="headerlink" title="接下来登录安装插件!"></a>接下来登录安装插件!</h3><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260100519.174eefsn5u4g.jpg"                      alt="202303260100519"                ></p><h3 id="插件安装完注册账号重启登录"><a href="#插件安装完注册账号重启登录" class="headerlink" title="插件安装完注册账号重启登录"></a>插件安装完注册账号重启登录</h3><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260100147.5keh2gw2c9s0.jpg"                      alt="202303260100147"                ></p><h3 id="修改为国内的清华大学官方镜像地址，最终内容如下："><a href="#修改为国内的清华大学官方镜像地址，最终内容如下：" class="headerlink" title="修改为国内的清华大学官方镜像地址，最终内容如下："></a>修改为国内的清华大学官方镜像地址，最终内容如下：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">找到这个配置文件hudson.model.UpdateCenter.xml</span></span><br><span class="line"></span><br><span class="line">   &lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span><br><span class="line">&lt;sites&gt;</span><br><span class="line">  &lt;site&gt;</span><br><span class="line">    &lt;id&gt;default&lt;/id&gt;</span><br><span class="line">    &lt;!--清华镜像--&gt;</span><br><span class="line">    &lt;url&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&lt;/url&gt;</span><br><span class="line">    &lt;!--官方镜像</span><br><span class="line">    &lt;url&gt;https://updates.jenkins.io/update-center.json&lt;/url&gt;--&gt;</span><br><span class="line">  &lt;/site&gt;</span><br><span class="line">&lt;/sites&gt;</span><br></pre></td></tr></table></figure><h3 id="插件管理高级里更改URL地址"><a href="#插件管理高级里更改URL地址" class="headerlink" title="插件管理高级里更改URL地址"></a>插件管理高级里更改URL地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260101482.2w22v4uztoy0.jpg"                      alt="202303260101482"                ></p><h3 id="配置Maven-Setting-xml路径-Docker安装最好挂载本地Maven"><a href="#配置Maven-Setting-xml路径-Docker安装最好挂载本地Maven" class="headerlink" title="配置Maven Setting.xml路径 Docker安装最好挂载本地Maven"></a>配置Maven Setting.xml路径 Docker安装最好挂载本地Maven</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件目录  获取JDK目录</span></span><br><span class="line"></span><br><span class="line">  echo $JAVA_HOME </span><br><span class="line">  /opt/java/openjdk</span><br><span class="line">  /usr/local/java/jdk1.8.0_221</span><br><span class="line">  /usr/local/maven/apache-maven-3.9.0</span><br><span class="line">  /usr/local/maven/apache-maven-3.9.0/conf/settings.xml</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260101807.6dsymz4ilbc0.jpg"                      alt="202303260101807"                ></p><h3 id="配置JDK-容器里自带JDK，也可挂载本地JDK-8"><a href="#配置JDK-容器里自带JDK，也可挂载本地JDK-8" class="headerlink" title="配置JDK 容器里自带JDK，也可挂载本地JDK 8"></a>配置JDK 容器里自带JDK，也可挂载本地JDK 8</h3><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260101281.6s72vdeqgb40.jpg"                      alt="202303260101281"                ></p><h3 id="配置Maven本地安装路径"><a href="#配置Maven本地安装路径" class="headerlink" title="配置Maven本地安装路径"></a>配置Maven本地安装路径</h3><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260101138.5hjkup5xcfk0.jpg"                      alt="202303260101138"                ></p><h3 id="最后测试一下构建项目"><a href="#最后测试一下构建项目" class="headerlink" title="最后测试一下构建项目"></a>最后测试一下构建项目</h3><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/5ober/chart-bed@main/20230326/202303260101792.yqeskaz3fzk.jpg"                      alt="202303260101792"                ></p><h3 id="2-war包安装方式"><a href="#2-war包安装方式" class="headerlink" title="2.war包安装方式"></a>2.war包安装方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载jenkins.war包 安装目录 Java-jar启动</span></span><br><span class="line"></span><br><span class="line">java -jar jenkins.war --httpPort=8081</span><br></pre></td></tr></table></figure><h3 id="3-安装版jenkins看链接"><a href="#3-安装版jenkins看链接" class="headerlink" title="3.安装版jenkins看链接"></a>3.安装版jenkins看链接</h3><p><a class="link"   href="https://developer.aliyun.com/article/885497" >安装版Jenkins教程<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装Jenkins-的方式&quot;&gt;&lt;a href=&quot;#安装Jenkins-的方式&quot; class=&quot;headerlink&quot; title=&quot;安装Jenkins 的方式&quot;&gt;&lt;/a&gt;安装Jenkins 的方式&lt;/h1&gt;&lt;p&gt;Jenkins 是一个可扩展的持续集成（CI）平台。</summary>
      
    
    
    
    <category term="Jenkins 自动化部署" scheme="http://example.com/categories/Jenkins-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Jenkins部署" scheme="http://example.com/tags/Jenkins%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>宝塔安装的redis开启远程连接</title>
    <link href="http://example.com/2023/03/19/%E5%AE%9D%E5%A1%94%E5%AE%89%E8%A3%85%E7%9A%84redis%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>http://example.com/2023/03/19/%E5%AE%9D%E5%A1%94%E5%AE%89%E8%A3%85%E7%9A%84redis%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</id>
    <published>2023-03-19T08:39:43.081Z</published>
    <updated>2023-03-19T07:58:20.015Z</updated>
    
    <content type="html"><![CDATA[<h3 id="宝塔安装的Redis开启远程连接"><a href="#宝塔安装的Redis开启远程连接" class="headerlink" title="宝塔安装的Redis开启远程连接"></a>宝塔安装的Redis开启远程连接</h3><p>第一步，打开配置文件&#x2F;www&#x2F;server&#x2F;redis&#x2F;redis.conf</p><p>搜索bind，修改自己的IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind 192.168.1.16</span><br></pre></td></tr></table></figure><p>搜索protected-mode，将保护模式yes改成no</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br></pre></td></tr></table></figure><p>将 requirepass foobared 的 foobared 改为自己需要设置的Redis密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass sober</span><br></pre></td></tr></table></figure><p>最后重启配置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;宝塔安装的Redis开启远程连接&quot;&gt;&lt;a href=&quot;#宝塔安装的Redis开启远程连接&quot; class=&quot;headerlink&quot; title=&quot;宝塔安装的Redis开启远程连接&quot;&gt;&lt;/a&gt;宝塔安装的Redis开启远程连接&lt;/h3&gt;&lt;p&gt;第一步，打开配置文件&amp;#x2</summary>
      
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    
    <category term="Redis开启远程连接" scheme="http://example.com/tags/Redis%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>GitLab 部署及管理员账号初始化</title>
    <link href="http://example.com/2023/03/18/GitLab%20%E9%83%A8%E7%BD%B2%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9/"/>
    <id>http://example.com/2023/03/18/GitLab%20%E9%83%A8%E7%BD%B2%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9/</id>
    <published>2023-03-18T08:27:30.194Z</published>
    <updated>2023-03-18T08:27:22.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GitLab-部署及管理员账号初始化"><a href="#GitLab-部署及管理员账号初始化" class="headerlink" title="GitLab 部署及管理员账号初始化"></a>GitLab 部署及管理员账号初始化</h2><h4 id="1-首先登录gitlab服务器执行以下命令："><a href="#1-首先登录gitlab服务器执行以下命令：" class="headerlink" title="1.首先登录gitlab服务器执行以下命令："></a>1.<strong>首先登录gitlab服务器执行以下命令：</strong></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到gitlab安装目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/gitlab/bin</span><br><span class="line"></span><br><span class="line">sudo  gitlab-rails console -e production</span><br></pre></td></tr></table></figure><h4 id="2-通过命令查找，确定用户为“root”"><a href="#2-通过命令查找，确定用户为“root”" class="headerlink" title="2.通过命令查找，确定用户为“root”"></a>2.通过命令查找，确定用户为“root”</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下这两个命令都可以，随便输入一个</span></span><br><span class="line"></span><br><span class="line">user = User.<span class="built_in">where</span>(<span class="built_in">id</span>: 1).first </span><br><span class="line"></span><br><span class="line">user = User.<span class="built_in">where</span>(name: <span class="string">&quot;root&quot;</span>).first</span><br></pre></td></tr></table></figure><h4 id="3-将root用户密码重置为admin123"><a href="#3-将root用户密码重置为admin123" class="headerlink" title="3.将root用户密码重置为admin123!"></a>3.将root用户密码重置为admin123!</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入重置密码命令</span></span><br><span class="line"></span><br><span class="line">user.password=<span class="string">&quot;admin123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次确认密码</span></span><br><span class="line"></span><br><span class="line">user.password_confirmation=<span class="string">&quot;admin123&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4-保存重置信息，并结束"><a href="#4-保存重置信息，并结束" class="headerlink" title="4.保存重置信息，并结束"></a>4.保存重置信息，并结束</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入保存命令，以便使更改信息生效</span></span><br><span class="line"></span><br><span class="line">user.save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出修改窗口</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>如果看到上面截图中的true ，恭喜你已经成功了，执行 exit 或quit退出当前设置流程即可。</p><p>回到gitlab ,可以通过 root&#x2F;admin123 这一超级管理员账号登录了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GitLab-部署及管理员账号初始化&quot;&gt;&lt;a href=&quot;#GitLab-部署及管理员账号初始化&quot; class=&quot;headerlink&quot; title=&quot;GitLab 部署及管理员账号初始化&quot;&gt;&lt;/a&gt;GitLab 部署及管理员账号初始化&lt;/h2&gt;&lt;h4 id=&quot;1</summary>
      
    
    
    
    <category term="GitLab" scheme="http://example.com/categories/GitLab/"/>
    
    
    <category term="GitLab 部署" scheme="http://example.com/tags/GitLab-%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Linux 配置静态IP</title>
    <link href="http://example.com/2023/03/16/Linux%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP/"/>
    <id>http://example.com/2023/03/16/Linux%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP/</id>
    <published>2023-03-16T12:15:28.222Z</published>
    <updated>2023-03-26T12:01:50.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux-配置静态IP"><a href="#Linux-配置静态IP" class="headerlink" title="Linux 配置静态IP"></a>Linux 配置静态IP</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CentOS 7 为例</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 修改网卡配置文件</span></span><br><span class="line"></span><br><span class="line">gedit /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="comment"># 配置的IP地址</span></span><br><span class="line">IPADDR=192.168.1.30</span><br><span class="line"><span class="comment"># 配置子网掩码</span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"><span class="comment"># 配置网关</span></span><br><span class="line">GATEWAY=192.168.1.2</span><br><span class="line"><span class="comment"># 配置DNS服务器</span></span><br><span class="line"><span class="comment"># 114 DNS</span></span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line"><span class="comment"># 阿里DNS</span></span><br><span class="line">DNS2=233.5.5.5</span><br><span class="line"><span class="comment"># 谷歌DNS</span></span><br><span class="line">DNS3=8.8.8.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启网卡</span></span><br><span class="line"></span><br><span class="line">service network restart</span><br></pre></td></tr></table></figure><h3 id="Rocky-9-0-NetworkManager-配置文件位置（ens160网卡名称）"><a href="#Rocky-9-0-NetworkManager-配置文件位置（ens160网卡名称）" class="headerlink" title="Rocky 9.0 NetworkManager 配置文件位置（ens160网卡名称）"></a>Rocky 9.0 NetworkManager 配置文件位置（ens160网卡名称）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改网卡配置文件</span></span><br><span class="line"></span><br><span class="line">vim /etc/NetworkManager/system-connections/ens160.nmconnection</span><br><span class="line"></span><br><span class="line">[ipv4]</span><br><span class="line"></span><br><span class="line"> //添加ip/子网掩码,网关</span><br><span class="line"></span><br><span class="line">address1=192.168.1.30/24,192.168.1.254 </span><br><span class="line"></span><br><span class="line">//添加dns地址（多个用;隔开）</span><br><span class="line"></span><br><span class="line">dns=8.8.8.8;114.114.114.114;                </span><br><span class="line"></span><br><span class="line">may-fail=false</span><br><span class="line"></span><br><span class="line">method=manual</span><br></pre></td></tr></table></figure><h4 id="2-重新加载配置文件"><a href="#2-重新加载配置文件" class="headerlink" title="2.重新加载配置文件"></a>2.重新加载配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection load /etc/NetworkManager/system-connections/ens160.nmconnectioni</span><br></pre></td></tr></table></figure><h4 id="3-激活配置文件"><a href="#3-激活配置文件" class="headerlink" title="3.激活配置文件"></a>3.激活配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection up /etc/NetworkManager/system-connections/ens160.nmconnection</span><br></pre></td></tr></table></figure><h3 id="龙蜥-Anolis-OS8-6QU1-设置静态IP"><a href="#龙蜥-Anolis-OS8-6QU1-设置静态IP" class="headerlink" title="龙蜥 Anolis OS8.6QU1 设置静态IP"></a>龙蜥 Anolis OS8.6QU1 设置静态IP</h3><h4 id="1-配置文件路径"><a href="#1-配置文件路径" class="headerlink" title="1.配置文件路径"></a>1.配置文件路径</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit /etc/sysconfig/network-scripts/ifcfg-ens160</span><br></pre></td></tr></table></figure><h4 id="2-网卡配置文件详解"><a href="#2-网卡配置文件详解" class="headerlink" title="2.网卡配置文件详解"></a>2.网卡配置文件详解</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# cat ifcfg-ens160-backup </span><br><span class="line">TYPE=Ethernet        #网络类型:Ethernet以太网</span><br><span class="line">PROXY_METHOD=none    #代理方式：关闭状态</span><br><span class="line">BROWSER_ONLY=no     # 只是浏览器：否</span><br><span class="line">BOOTPROTO=dhcp       #引导协议：static静态、dhcp动态获取、none不指定（可能出现问题</span><br><span class="line">DEFROUTE=yes         #启动默认路由</span><br><span class="line">IPV4_FAILURE_FATAL=no  #不启用IPV4错误检测功能</span><br><span class="line">IPV6INIT=yes         #启用IPV6协议</span><br><span class="line">IPV6_AUTOCONF=yes    #自动配置IPV6地址</span><br><span class="line">IPV6_DEFROUTE=yes    #启用IPV6默认路由</span><br><span class="line">IPV6_FAILURE_FATAL=no #不启用IPV6错误检测功能</span><br><span class="line">NAME=ens160          # 网卡设备的别名</span><br><span class="line">UUID=985f89ca-ada3-4dfd-9dd2-c97f680a8ed1  #网卡设备的UUID,通用唯一识别码</span><br><span class="line">DEVICE=ens160        # 网卡的设备名称</span><br><span class="line">ONBOOT=yes           #开机自动启动网卡</span><br></pre></td></tr></table></figure><h4 id="3-配置网卡"><a href="#3-配置网卡" class="headerlink" title="3.配置网卡"></a>3.配置网卡</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# cat ifcfg-ens160</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static  #引导协议：static静态</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">NAME=ens160</span><br><span class="line">UUID=985f89ca-ada3-4dfd-9dd2-c97f680a8ed1</span><br><span class="line">DEVICE=ens160</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.1.16 #想要设置的固定IP</span><br><span class="line">NETMASK=255.255.255.0 #默认网关</span><br><span class="line">GATEWAY=192.168.1.1   #子网掩码</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置DNS服务器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">114 DNS</span></span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阿里DNS</span></span><br><span class="line">DNS2=233.5.5.5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">谷歌DNS</span></span><br><span class="line">DNS3=8.8.8.8</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-重启网卡"><a href="#4-重启网卡" class="headerlink" title="4.重启网卡"></a>4.重启网卡</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmcli c reload                         # 重新加载配置文件</span><br><span class="line">nmcli c up ens160                      # 重启ens160网卡</span><br></pre></td></tr></table></figure><h3 id="Ubatu22-04-设置静态IP"><a href="#Ubatu22-04-设置静态IP" class="headerlink" title="Ubatu22.04 设置静态IP"></a>Ubatu22.04 设置静态IP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入/etc/netplan/目录，列出该目录下的内容</span></span><br><span class="line"></span><br><span class="line">cd /etc/netplan/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用gedit编辑器打开xxx.yaml文件，进行编辑</span></span><br><span class="line"></span><br><span class="line">gedit 01-network-manager-all.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内容如下：（修改网卡名称、IP、网关后保存退出）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">    <span class="attr">ethernets:</span></span><br><span class="line">        <span class="attr">ens33:</span>                    <span class="comment">## network card name</span></span><br><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">dhcp6:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">addresses:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span><span class="string">/24</span>   <span class="comment">## set static IP</span></span><br><span class="line">            <span class="attr">routes:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">default</span></span><br><span class="line">                <span class="attr">via:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>  <span class="comment">## gateway</span></span><br><span class="line">            <span class="attr">nameservers:</span></span><br><span class="line">              <span class="attr">addresses:</span> [<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>,<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>,<span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span>,<span class="number">233.5</span><span class="number">.5</span><span class="number">.5</span>]</span><br><span class="line">    <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">renderer:</span> <span class="string">NetworkManager</span></span><br></pre></td></tr></table></figure><p>格式的缩进很容易出错， 可以直接复制以上模板，只修改网卡名称、IP和网关即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启网络服务</span></span><br><span class="line"></span><br><span class="line">sudo netplan apply</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有报错说明格式正确。</span></span><br><span class="line"></span><br><span class="line">sudo systemctl start systemd-networkd</span><br></pre></td></tr></table></figure><h4 id="ping-不通"><a href="#ping-不通" class="headerlink" title="ping 不通"></a>ping 不通</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Linux-配置静态IP&quot;&gt;&lt;a href=&quot;#Linux-配置静态IP&quot; class=&quot;headerlink&quot; title=&quot;Linux 配置静态IP&quot;&gt;&lt;/a&gt;Linux 配置静态IP&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="Linux 静态IP" scheme="http://example.com/categories/Linux-%E9%9D%99%E6%80%81IP/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>宝塔面板</title>
    <link href="http://example.com/2023/03/16/%E5%AE%9D%E5%A1%94Linux%E9%9D%A2%E6%9D%BF/"/>
    <id>http://example.com/2023/03/16/%E5%AE%9D%E5%A1%94Linux%E9%9D%A2%E6%9D%BF/</id>
    <published>2023-03-16T11:37:16.251Z</published>
    <updated>2023-03-18T08:26:00.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="宝塔面板"><a href="#宝塔面板" class="headerlink" title="宝塔面板"></a>宝塔面板</h3><p><strong>Centos安装脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure><h3 id="一键卸载宝塔Linux面板及运行环境命令"><a href="#一键卸载宝塔Linux面板及运行环境命令" class="headerlink" title="一键卸载宝塔Linux面板及运行环境命令"></a>一键卸载宝塔Linux面板及运行环境命令</h3><p>注：卸载环境可能会影响服务器数据 请谨慎操作！</p><p> 1.进入ssh 输入以下命令下载脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.bt.cn/install/bt-uninstall.sh</span><br></pre></td></tr></table></figure><p>2.执行脚本 （若是ubutnu用户请在前面加sudo 例子sudo sh bt-uninstall.sh）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bt-uninstall.sh</span><br></pre></td></tr></table></figure><p>外网面板地址: <a class="link"   href="https://101.86.227.152:36726/29b6342f" >https://101.86.227.152:36726/29b6342f<i class="fas fa-external-link-alt"></i></a><br>内网面板地址: <a class="link"   href="https://192.168.1.10:36726/29b6342f" >https://192.168.1.10:36726/29b6342f<i class="fas fa-external-link-alt"></i></a> 已改为sober<br>username: gduslnen 已改为sober<br>password: c813af86  已改为sober123<br>If you cannot access the panel,<br>release the following panel port [36726] in the security group<br>若无法访问面板，请检查防火墙&#x2F;安全组是否有放行面板[36726]端口<br>因已开启面板自签证书，访问面板会提示不匹配证书，请参考以下链接配置证书<br><a class="link"   href="https://www.bt.cn/bbs/thread-105443-1-1.html" >https://www.bt.cn/bbs/thread-105443-1-1.html<i class="fas fa-external-link-alt"></i></a></p><p><strong>防火墙命令</strong></p><p>1）查看防火墙的版本。<br>firewall-cmd –version<br>2）查看firewall的状态。<br>firewall-cmd –state<br>3）查看firewall服务状态（普通用户可执行）。<br>systemctl status firewalld<br>4）查看防火墙全部的信息。<br>firewall-cmd –list-all<br>5）查看防火墙已开通的端口。<br>firewall-cmd –list-port<br>6）查看防火墙已开通的服务。<br>firewall-cmd –list-service<br>7）查看全部的服务列表（普通用户可执行）。<br>firewall-cmd –get-services<br>8）查看防火墙服务是否开机启动。<br>systemctl is-enabled firewalld<br>2、配置防火墙的命令<br> 1）启动、重启、关闭防火墙服务。</p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>systemctl start firewalld</p><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><p>systemctl restart firewalld</p><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p>systemctl stop firewalld<br>2）开放、移去某个端口。</p><h4 id="开放80端口"><a href="#开放80端口" class="headerlink" title="开放80端口"></a>开放80端口</h4><p>firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent</p><h4 id="移去80端口"><a href="#移去80端口" class="headerlink" title="移去80端口"></a>移去80端口</h4><p>firewall-cmd –zone&#x3D;public –remove-port&#x3D;80&#x2F;tcp –permanent<br>3）开放、移去范围端口。</p><h4 id="开放5000-5500之间的端口"><a href="#开放5000-5500之间的端口" class="headerlink" title="开放5000-5500之间的端口"></a>开放5000-5500之间的端口</h4><p>firewall-cmd –zone&#x3D;public –add-port&#x3D;5000-5500&#x2F;tcp –permanent</p><h4 id="移去5000-5500之间的端口"><a href="#移去5000-5500之间的端口" class="headerlink" title="移去5000-5500之间的端口"></a>移去5000-5500之间的端口</h4><p>firewall-cmd –zone&#x3D;public –remove-port&#x3D;5000-5500&#x2F;tcp –permanent<br>4）开放、移去服务。</p><h4 id="开放ftp服务"><a href="#开放ftp服务" class="headerlink" title="开放ftp服务"></a>开放ftp服务</h4><p>firewall-cmd –zone&#x3D;public –add-service&#x3D;ftp –permanent</p><h4 id="移去http服务"><a href="#移去http服务" class="headerlink" title="移去http服务"></a>移去http服务</h4><p>firewall-cmd –zone&#x3D;public –remove-service&#x3D;ftp –permanent<br>5）重新加载防火墙配置（修改配置后要重新加载防火墙配置或重启防火墙服务）。<br>firewall-cmd –reload<br>6）设置开机时启用、禁用防火墙服务。</p><h4 id="启用服务"><a href="#启用服务" class="headerlink" title="启用服务"></a>启用服务</h4><p>systemctl enable firewalld</p><h4 id="禁用服务"><a href="#禁用服务" class="headerlink" title="禁用服务"></a>禁用服务</h4><p>systemctl disable firewalld</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;宝塔面板&quot;&gt;&lt;a href=&quot;#宝塔面板&quot; class=&quot;headerlink&quot; title=&quot;宝塔面板&quot;&gt;&lt;/a&gt;宝塔面板&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Centos安装脚本&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell</summary>
      
    
    
    
    <category term="宝塔面板" scheme="http://example.com/categories/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"/>
    
    
    <category term="宝塔Linux面板" scheme="http://example.com/tags/%E5%AE%9D%E5%A1%94Linux%E9%9D%A2%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>MySQL远程连接授权</title>
    <link href="http://example.com/2023/03/16/MySQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%8E%88%E6%9D%83/"/>
    <id>http://example.com/2023/03/16/MySQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%8E%88%E6%9D%83/</id>
    <published>2023-03-16T10:52:18.516Z</published>
    <updated>2023-03-19T08:39:11.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL中grant-all-privileges-on赋给用户远程权限"><a href="#MySQL中grant-all-privileges-on赋给用户远程权限" class="headerlink" title="MySQL中grant all privileges on赋给用户远程权限"></a>MySQL中grant all privileges on赋给用户远程权限</h3><p>当你的帐号不允许从远程登陆，只能在<code>localhost</code>连接时。这个时候只要在mysql服务器上，更改 <code>mysql</code> 数据库里的 <code>user</code> 表里的 <code>host</code> 项，从<code>localhost&quot;</code>改成<code>%</code>即可实现用户远程登录</p><h4 id="1-授权法"><a href="#1-授权法" class="headerlink" title="1.授权法"></a>1.授权法</h4><p>MySQL 5.0+版本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给root账户授权（root默认只有本机访问的权限，要通过其他机器访问，必须授权）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> root@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最后刷新数据库服务</span></span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>模板： grant all privileges on 库名.表名 to ‘用户名‘@’IP地址’ identified by ‘密码’ with grant option; </p><p>flush privileges;</p><p>注意授权后必须FLUSH PRIVILEGES;否则无法立即生效。</p><p>高版本8.0数据库不能按照<code>grant all privileges on *.* to &quot;root&quot;@&quot;%&quot; identified by &quot;xxxx&quot;;</code>去修改用户权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> @<span class="variable">@VERSION</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@VERSION</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8.0</span><span class="number">.14</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>MySQL 8.0+版本</p><p>查看用户账号信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">User</span>, host <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">User</span>             <span class="operator">|</span> host      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> mysql.infoschema <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.session    <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys        <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>先创建远程用户，再授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span>  <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次查看发现有了root %</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">User</span>, host <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">User</span>             <span class="operator">|</span> Host      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.infoschema <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.session    <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys        <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">————————————————</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;MySQL中grant-all-privileges-on赋给用户远程权限&quot;&gt;&lt;a href=&quot;#MySQL中grant-all-privileges-on赋给用户远程权限&quot; class=&quot;headerlink&quot; title=&quot;MySQL中grant all pr</summary>
      
    
    
    
    <category term="MySQL连接" scheme="http://example.com/categories/MySQL%E8%BF%9E%E6%8E%A5/"/>
    
    
    <category term="MySQL远程连接授权" scheme="http://example.com/tags/MySQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>IDEA的日常快捷键及Linux命令</title>
    <link href="http://example.com/2023/03/13/IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8ALInux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2023/03/13/IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8ALInux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-03-12T19:06:19.760Z</published>
    <updated>2023-03-16T11:43:15.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA-常用快捷键一览表"><a href="#IntelliJ-IDEA-常用快捷键一览表" class="headerlink" title="IntelliJ IDEA 常用快捷键一览表"></a>IntelliJ IDEA 常用快捷键一览表</h1><hr><h2 id="1-IDEA的日常快捷键"><a href="#1-IDEA的日常快捷键" class="headerlink" title="1-IDEA的日常快捷键"></a>1-IDEA的日常快捷键</h2><h3 id="第1组：通用型"><a href="#第1组：通用型" class="headerlink" title="第1组：通用型"></a>第1组：通用型</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>复制代码-copy</td><td>ctrl + c</td></tr><tr><td>粘贴-paste</td><td>ctrl + v</td></tr><tr><td>剪切-cut</td><td>ctrl + x</td></tr><tr><td>撤销-undo</td><td>ctrl + z</td></tr><tr><td>反撤销-redo</td><td>ctrl + shift + z</td></tr><tr><td>保存-save all</td><td>ctrl + s</td></tr><tr><td>全选-select all</td><td>ctrl + a</td></tr></tbody></table><h3 id="第2组：提高编写速度（上）"><a href="#第2组：提高编写速度（上）" class="headerlink" title="第2组：提高编写速度（上）"></a>第2组：提高编写速度（上）</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>智能提示-edit</td><td>alt + enter</td></tr><tr><td>提示代码模板-insert live template</td><td>ctrl+j</td></tr><tr><td>使用xx块环绕-surround with …</td><td>ctrl+alt+t</td></tr><tr><td>调出生成getter&#x2F;setter&#x2F;构造器等结构-generate …</td><td>alt+insert</td></tr><tr><td>自动生成返回值变量-introduce variable …</td><td>ctrl+alt+v</td></tr><tr><td>复制指定行的代码-duplicate line or selection</td><td>ctrl+d</td></tr><tr><td>删除指定行的代码-delete line</td><td>ctrl+y</td></tr><tr><td>切换到下一行代码空位-start new line</td><td>shift + enter</td></tr><tr><td>切换到上一行代码空位-start new line before current</td><td>ctrl +alt+ enter</td></tr><tr><td>向上移动代码-move statement up</td><td>ctrl+shift+↑</td></tr><tr><td>向下移动代码-move statement down</td><td>ctrl+shift+↓</td></tr><tr><td>向上移动一行-move line up</td><td>alt+shift+↑</td></tr><tr><td>向下移动一行-move line down</td><td>alt+shift+↓</td></tr><tr><td>方法的形参列表提醒-parameter info</td><td>ctrl+p</td></tr></tbody></table><h3 id="第3组：提高编写速度（下）"><a href="#第3组：提高编写速度（下）" class="headerlink" title="第3组：提高编写速度（下）"></a>第3组：提高编写速度（下）</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>批量修改指定的变量名、方法名、类名等-rename</td><td>shift+f6</td></tr><tr><td>抽取代码重构方法-extract method …</td><td>ctrl+alt+m</td></tr><tr><td>重写父类的方法-override methods …</td><td>ctrl+o</td></tr><tr><td>实现接口的方法-implements methods …</td><td>ctrl+i</td></tr><tr><td>选中的结构的大小写的切换-toggle case</td><td>ctrl+shift+u</td></tr><tr><td>批量导包-optimize imports</td><td>ctrl+alt+o</td></tr></tbody></table><h3 id="第4组：类结构、查找和查看源码"><a href="#第4组：类结构、查找和查看源码" class="headerlink" title="第4组：类结构、查找和查看源码"></a>第4组：类结构、查找和查看源码</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>如何查看源码-go to class…</td><td>ctrl + 选中指定的结构 或 ctrl+n</td></tr><tr><td>显示当前类结构，支持搜索指定的方法、属性等-file structure</td><td>ctrl+f12</td></tr><tr><td>退回到前一个编辑的页面-back</td><td>ctrl+alt+←</td></tr><tr><td>进入到下一个编辑的页面-forward</td><td>ctrl+alt+→</td></tr><tr><td>打开的类文件之间切换-select previous&#x2F;next tab</td><td>alt+←&#x2F;→</td></tr><tr><td>光标选中指定的类，查看继承树结构-Type Hierarchy</td><td>ctrl+h</td></tr><tr><td>查看方法文档-quick documentation</td><td>ctrl+q</td></tr><tr><td>类的UML关系图-show uml popup</td><td>ctrl+alt+u</td></tr><tr><td>定位某行-go to line&#x2F;column</td><td>ctrl+g</td></tr><tr><td>回溯变量或方法的来源-go to implementation(s)</td><td>ctrl+alt+b</td></tr><tr><td>折叠方法实现-collapse all</td><td>ctrl+shift+ -</td></tr><tr><td>展开方法实现-expand all</td><td>ctrl+shift+ +</td></tr></tbody></table><h3 id="第5组：查找、替换与关闭"><a href="#第5组：查找、替换与关闭" class="headerlink" title="第5组：查找、替换与关闭"></a>第5组：查找、替换与关闭</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>查找指定的结构</td><td>ctlr+f</td></tr><tr><td>快速查找：选中的Word快速定位到下一个-find next</td><td>ctrl+l</td></tr><tr><td>查找与替换-replace</td><td>ctrl+r</td></tr><tr><td>直接定位到当前行的首位-move caret to line start</td><td>home</td></tr><tr><td>直接定位到当前行的末位 -move caret to line end</td><td>end</td></tr><tr><td>查询当前元素在当前文件中的引用，然后按 F3 可以选择</td><td>ctrl+f7</td></tr><tr><td>全项目搜索文本-find in path …</td><td>ctrl+shift+f</td></tr><tr><td>关闭当前窗口-close</td><td>ctrl+f4</td></tr></tbody></table><h3 id="第6组：调整格式"><a href="#第6组：调整格式" class="headerlink" title="第6组：调整格式"></a>第6组：调整格式</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>格式化代码-reformat code</td><td>ctrl+alt+l</td></tr><tr><td>使用单行注释-comment with line comment</td><td>ctrl + &#x2F;</td></tr><tr><td>使用&#x2F;取消多行注释-comment with block comment</td><td>ctrl + shift + &#x2F;</td></tr><tr><td>选中数行，整体往后移动-tab</td><td>tab</td></tr><tr><td>选中数行，整体往前移动-prev tab</td><td>shift + tab</td></tr></tbody></table><h2 id="2-Debug快捷键"><a href="#2-Debug快捷键" class="headerlink" title="2-Debug快捷键"></a>2-Debug快捷键</h2><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>单步调试（不进入函数内部）- step over</td><td>F8</td></tr><tr><td>单步调试（进入函数内部）- step into</td><td>F7</td></tr><tr><td>强制单步调试（进入函数内部） - force step into</td><td>alt+shift+f7</td></tr><tr><td>选择要进入的函数 - smart step into</td><td>shift + F7</td></tr><tr><td>跳出函数 - step out</td><td>shift + F8</td></tr><tr><td>运行到断点 - run to cursor</td><td>alt + F9</td></tr><tr><td>继续执行，进入下一个断点或执行完程序 - resume program</td><td>F9</td></tr><tr><td>停止 - stop</td><td>Ctrl+F2</td></tr><tr><td>查看断点 - view breakpoints</td><td>Ctrl+Shift+F8</td></tr><tr><td>关闭 - close</td><td>Ctrl+F4</td></tr></tbody></table><h3 id="3-常用代码模板"><a href="#3-常用代码模板" class="headerlink" title="3- 常用代码模板"></a>3- 常用代码模板</h3><h4 id="1、非空判断"><a href="#1、非空判断" class="headerlink" title="1、非空判断"></a>1、非空判断</h4><ul><li>变量.null：if(变量 &#x3D;&#x3D; null)</li><li>变量.nn：if(变量 !&#x3D; null) </li><li>变量.notnull：if(变量 !&#x3D; null) </li><li>ifn：if(xx  &#x3D;&#x3D; null)</li><li>inn：if(xx  !&#x3D; null)</li></ul><h4 id="2、遍历数组和集合"><a href="#2、遍历数组和集合" class="headerlink" title="2、遍历数组和集合"></a>2、遍历数组和集合</h4><ul><li>数组或集合变量.fori：for循环</li><li>数组或集合变量.for：增强for循环</li><li>数组或集合变量.forr：反向for循环</li><li>数组或集合变量.iter：增强for循环遍历数组或集合</li></ul><h4 id="3、输出语句"><a href="#3、输出语句" class="headerlink" title="3、输出语句"></a>3、输出语句</h4><ul><li>sout：相当于System.out.println</li><li>soutm：打印当前方法的名称</li><li>soutp：打印当前方法的形参及形参对应的实参值</li><li>soutv：打印方法中声明的最近的变量的值</li><li>变量.sout：打印当前变量值</li><li>变量.soutv：打印当前变量名及变量值</li></ul><h4 id="4、对象操作"><a href="#4、对象操作" class="headerlink" title="4、对象操作"></a>4、对象操作</h4><ul><li>创建对象<ul><li>Xxx.new  .var ：创建Xxx类的对象，并赋给相应的变量</li><li>Xxx.new  .field：会将方法内刚创建的Xxx对象抽取为一个属性</li></ul></li><li>强转<ul><li>对象.cast：将对象进行强转</li><li>对象.castvar：将对象强转后，并赋给一个变量</li></ul></li></ul><h4 id="5、静态常量声明"><a href="#5、静态常量声明" class="headerlink" title="5、静态常量声明"></a>5、静态常量声明</h4><ul><li>psf：public static final</li><li>psfi：public static final int</li><li>psfs：public static final String</li><li>prsf：private static final</li></ul><p><a class="link"   href="https://blog.csdn.net/weixin_44895651/article/details/105289038" >Linux常用命令<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.linuxcool.com/" >Linux命令大全(手册)<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IntelliJ-IDEA-常用快捷键一览表&quot;&gt;&lt;a href=&quot;#IntelliJ-IDEA-常用快捷键一览表&quot; class=&quot;headerlink&quot; title=&quot;IntelliJ IDEA 常用快捷键一览表&quot;&gt;&lt;/a&gt;IntelliJ IDEA 常用快捷键一</summary>
      
    
    
    
    <category term="IDEA 快捷键" scheme="http://example.com/categories/IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    
    <category term="IDEA Linux" scheme="http://example.com/tags/IDEA-Linux/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/02/21/3.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://example.com/2023/02/21/3.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2023-02-20T16:57:05.502Z</published>
    <updated>2023-02-20T16:29:32.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-数组中重复的数字"><a href="#3-数组中重复的数字" class="headerlink" title="3. 数组中重复的数字"></a>3. 数组中重复的数字</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a class="link"   href="https://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8?tpId=13&tqId=11203&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github" >牛客网<i class="fas fa-external-link-alt"></i></a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个长度为 n 的数组里的所有数字都在 0 到 n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字是重复的，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">&#123;2, 3, 1, 0, 2, 5&#125;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>要求时间复杂度 O(N)，空间复杂度 O(1)。因此不能使用排序的方法，也不能使用额外的标记数组。</p><p>对于这种数组元素在 [0, n-1] 范围内的问题，可以将值为 i 的元素调整到第 i 个位置上进行求解。本题要求找出重复的数字，因此在调整过程中，如果第 i 位置上已经有一个值为 i 的元素，就可以知道 i 值重复。</p><p>以 (2, 3, 1, 0, 2, 5) 为例，遍历到位置 4 时，该位置上的数为 2，但是第 2 个位置上已经有一个 2 的值了，因此可以知道 2 重复：</p><div align="center"> <img                       lazyload                     alt="image"                     data-src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/643b6f18-f933-4ac5-aa7a-e304dbd7fe49.gif"                      width="350px"                > </div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">duplicate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> length, <span class="type">int</span>[] duplication)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (nums[i] != i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[nums[i]]) &#123;</span><br><span class="line">                duplication[<span class="number">0</span>] = nums[i];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(nums, i, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><img  width="320px"                      lazyload                     alt="image"                     data-src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/githubio/公众号二维码-2.png"                                     ></img></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3-数组中重复的数字&quot;&gt;&lt;a href=&quot;#3-数组中重复的数字&quot; class=&quot;headerlink&quot; title=&quot;3. 数组中重复的数字&quot;&gt;&lt;/a&gt;3. 数组中重复的数字&lt;/h1&gt;&lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/02/21/4.%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://example.com/2023/02/21/4.%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</id>
    <published>2023-02-20T16:57:05.499Z</published>
    <updated>2023-02-20T16:29:32.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-二维数组中的查找"><a href="#4-二维数组中的查找" class="headerlink" title="4. 二维数组中的查找"></a>4. 二维数组中的查找</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a class="link"   href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github" >牛客网<i class="fas fa-external-link-alt"></i></a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二维数组，其每一行从左到右递增排序，从上到下也是递增排序。给定一个数，判断这个数是否在该二维数组中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Consider the following matrix:</span><br><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Given target = 5, return true.</span><br><span class="line">Given target = 20, return false.</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>要求时间复杂度 O(M + N)，空间复杂度 O(1)。其中 M 为行数，N 为 列数。</p><p>该二维数组中的一个数，小于它的数一定在其左边，大于它的数一定在其下边。因此，从右上角开始查找，就可以根据 target 和当前元素的大小关系来缩小查找区间，当前元素的查找区间为左下角的所有元素。</p><div align="center"> <img                       lazyload                     alt="image"                     data-src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/35a8c711-0dc0-4613-95f3-be96c6c6e104.gif"                      width="400px"                > </div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Find</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length, cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>, c = cols - <span class="number">1</span>; <span class="comment">// 从右上角开始</span></span><br><span class="line">    <span class="keyword">while</span> (r &lt;= rows - <span class="number">1</span> &amp;&amp; c &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == matrix[r][c])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; matrix[r][c])</span><br><span class="line">            r++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            c--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><img  width="320px"                      lazyload                     alt="image"                     data-src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/githubio/公众号二维码-2.png"                                     ></img></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4-二维数组中的查找&quot;&gt;&lt;a href=&quot;#4-二维数组中的查找&quot; class=&quot;headerlink&quot; title=&quot;4. 二维数组中的查找&quot;&gt;&lt;/a&gt;4. 二维数组中的查找&lt;/h1&gt;&lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java 并发 - 理论基础</title>
    <link href="http://example.com/2023/02/20/Java%20%E5%B9%B6%E5%8F%91%20-%20%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/02/20/Java%20%E5%B9%B6%E5%8F%91%20-%20%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</id>
    <published>2023-02-19T16:00:00.000Z</published>
    <updated>2023-03-27T18:20:33.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-并发-理论基础"><a href="#Java-并发-理论基础" class="headerlink" title="Java 并发 - 理论基础"></a>Java 并发 - 理论基础</h1><blockquote><p>本文从理论的角度引入并发安全问题以及JMM应对并发问题的原理。</p></blockquote><ul><li>带着BAT大厂的面试问题去理解</li><li>为什么需要多线程</li><li>线程不安全示例</li><li>并发出现问题的根源: 并发三要素<ul><li>可见性: CPU缓存引起</li><li>原子性: 分时复用引起</li><li>有序性: 重排序引起</li></ul></li><li>JAVA是怎么解决并发问题的: JMM(Java内存模型)<ul><li>关键字: volatile、synchronized 和 final</li><li>Happens-Before 规则</li></ul></li><li>线程安全: 不是一个非真即假的命题<ul><li><ol><li>不可变</li></ol></li><li><ol start="2"><li>绝对线程安全</li></ol></li><li><ol start="3"><li>相对线程安全</li></ol></li><li><ol start="4"><li>线程兼容</li></ol></li><li><ol start="5"><li>线程对立</li></ol></li></ul></li><li>线程安全的实现方法<ul><li><ol><li>互斥同步</li></ol></li><li><ol start="2"><li>非阻塞同步</li></ol></li><li><ol start="3"><li>无同步方案</li></ol></li></ul></li></ul><h2 id="带着BAT大厂的面试问题去理解"><a href="#带着BAT大厂的面试问题去理解" class="headerlink" title="带着BAT大厂的面试问题去理解"></a>带着BAT大厂的面试问题去理解</h2><p>:::</p><p>TIP</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解并发理论基础。</p><p>:::</p><ul><li>多线程的出现是要解决什么问题的?</li><li>线程不安全是指什么? 举例说明</li><li>并发出现线程不安全的本质什么? 可见性，原子性和有序性。</li><li>Java是怎么解决并发问题的? 3个关键字，JMM和8个Happens-Before</li><li>线程安全是不是非真即假? 不是</li><li>线程安全有哪些实现思路?</li><li>如何理解并发和并行的区别?</li></ul><h2 id="为什么需要多线程"><a href="#为什么需要多线程" class="headerlink" title="为什么需要多线程"></a>为什么需要多线程</h2><p>众所周知，CPU、内存、I&#x2F;O 设备的速度是有极大差异的，为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系结构、操作系统、编译程序都做出了贡献，主要体现为:</p><ul><li>CPU 增加了缓存，以均衡与内存的速度差异；&#x2F;&#x2F; 导致 <code>可见性</code>问题</li><li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I&#x2F;O 设备的速度差异；&#x2F;&#x2F; 导致 <code>原子性</code>问题</li><li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。&#x2F;&#x2F; 导致 <code>有序性</code>问题</li></ul><h2 id="线程不安全示例"><a href="#线程不安全示例" class="headerlink" title="线程不安全示例"></a>线程不安全示例</h2><p>如果多个线程对同一个共享数据进行访问而不采取同步操作的话，那么操作的结果是不一致的。</p><p>以下代码演示了 1000 个线程同时对 cnt 执行自增操作，操作结束之后它的值有可能小于 1000。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadUnsafeExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">threadSize</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="type">ThreadUnsafeExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadUnsafeExample</span>();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(threadSize);</span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example.add();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    System.out.println(example.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">997</span> <span class="comment">// 结果总是小于1000</span></span><br></pre></td></tr></table></figure><h2 id="并发出现问题的根源-并发三要素"><a href="#并发出现问题的根源-并发三要素" class="headerlink" title="并发出现问题的根源: 并发三要素"></a>并发出现问题的根源: 并发三要素</h2><p>上述代码输出为什么不是1000? 并发出现问题的根源是什么?</p><h3 id="可见性-CPU缓存引起"><a href="#可见性-CPU缓存引起" class="headerlink" title="可见性: CPU缓存引起"></a>可见性: CPU缓存引起</h3><p>可见性：一个线程对共享变量的修改，另外一个线程能够立刻看到。</p><p>举个简单的例子，看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1执行的代码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">i = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2执行的代码</span></span><br><span class="line">j = i;</span><br></pre></td></tr></table></figure><p>假若执行线程1的是CPU1，执行线程2的是CPU2。由上面的分析可知，当线程1执行 i &#x3D;10这句时，会先把i的初始值加载到CPU1的高速缓存中，然后赋值为10，那么在CPU1的高速缓存当中i的值变为10了，却没有立即写入到主存当中。</p><p>此时线程2执行 j &#x3D; i，它会先去主存读取i的值并加载到CPU2的缓存当中，注意此时内存当中i的值还是0，那么就会使得j的值为0，而不是10.</p><p>这就是可见性问题，线程1对变量i修改了之后，线程2没有立即看到线程1修改的值。</p><h3 id="原子性-分时复用引起"><a href="#原子性-分时复用引起" class="headerlink" title="原子性: 分时复用引起"></a>原子性: 分时复用引起</h3><p>原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p><p>经典的<strong>转账问题</strong>：比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。</p><p>试想一下，如果这2个操作不具备原子性，会造成什么样的后果。假如从账户A减去1000元之后，操作突然中止。然后又从B取出了500元，取出500元之后，再执行 往账户B加上1000元 的操作。这样就会导致账户A虽然减去了1000元，但是账户B没有收到这个转过来的1000元。</p><p>所以这2个操作必须要具备原子性才能保证不出现一些意外的问题。</p><h3 id="有序性-重排序引起"><a href="#有序性-重排序引起" class="headerlink" title="有序性: 重排序引起"></a>有序性: 重排序引起</h3><p>有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;              </span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">i = <span class="number">1</span>;                <span class="comment">//语句1  </span></span><br><span class="line">flag = <span class="literal">true</span>;          <span class="comment">//语句2</span></span><br></pre></td></tr></table></figure><p>上面代码定义了一个int型变量，定义了一个boolean类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗? 不一定，为什么呢? 这里可能会发生指令重排序（Instruction Reorder）。</p><p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：</p><ul><li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li><li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li><li>内存系统的重排序。由于处理器使用缓存和读 &#x2F; 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li></ul><p>从 java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</p><p><img                       lazyload                     alt="image"                     data-src="https://pchaoo.gitee.io/blog/img/jvm/java-jmm-3.png"                      alt="img"                ></p><p>上述的 1 属于编译器重排序，2 和 3 属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM 的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM 的处理器重排序规则会要求 java 编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel 称之为 memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。</p><p>具体可以参看：<a class="link"   href="https://pchaoo.gitee.io/blog/blog/md/java/jvm/java-jvm-jmm.html" >Java 内存模型详解<i class="fas fa-external-link-alt"></i></a>的重排序章节。</p><h2 id="JAVA是怎么解决并发问题的-JMM-Java内存模型"><a href="#JAVA是怎么解决并发问题的-JMM-Java内存模型" class="headerlink" title="JAVA是怎么解决并发问题的: JMM(Java内存模型)"></a>JAVA是怎么解决并发问题的: JMM(Java内存模型)</h2><p>Java 内存模型是个很复杂的规范，强烈推荐你看后续（应该是网上能找到最好的材料之一了）：<a class="link"   href="https://pchaoo.gitee.io/blog/blog/md/java/jvm/java-jvm-jmm.html" >Java 内存模型详解<i class="fas fa-external-link-alt"></i></a>。</p><p><strong>理解的第一个维度：核心知识点</strong></p><p>JMM本质上可以理解为，Java 内存模型规范了 JVM 如何提供按需禁用缓存和编译优化的方法。具体来说，这些方法包括：</p><ul><li>volatile、synchronized 和 final 三个关键字</li><li>Happens-Before 规则</li></ul><p><strong>理解的第二个维度：可见性，有序性，原子性</strong></p><ul><li>原子性</li></ul><p>在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。 请分析以下哪些操作是原子性操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span>;        <span class="comment">//语句1: 直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中</span></span><br><span class="line">y = x;         <span class="comment">//语句2: 包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。</span></span><br><span class="line">x++;           <span class="comment">//语句3： x++包括3个操作：读取x的值，进行加1操作，写入新的值。</span></span><br><span class="line">x = x + <span class="number">1</span>;     <span class="comment">//语句4： 同语句3</span></span><br></pre></td></tr></table></figure><p>上面4个语句只有语句1的操作具备原子性。</p><p>也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。</p><blockquote><p>从上面可以看出，Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p></blockquote><ul><li>可见性</li></ul><p>Java提供了volatile关键字来保证可见性。</p><p>当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p><p>而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p><blockquote><p>另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p></blockquote><ul><li>有序性</li></ul><p>在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。当然JMM是通过Happens-Before 规则来保证有序性的。</p><h3 id="关键字-volatile、synchronized-和-final"><a href="#关键字-volatile、synchronized-和-final" class="headerlink" title="关键字: volatile、synchronized 和 final"></a>关键字: volatile、synchronized 和 final</h3><p>以下三篇文章详细分析了这三个关键字：</p><ul><li>关键字: synchronized详解</li><li>关键字: volatile详解</li><li>关键字: final详解</li></ul><h3 id="Happens-Before-规则"><a href="#Happens-Before-规则" class="headerlink" title="Happens-Before 规则"></a>Happens-Before 规则</h3><p>上面提到了可以用 volatile 和 synchronized 来保证有序性。除此之外，JVM 还规定了先行发生原则，让一个操作无需控制就能先于另一个操作完成。</p><h4 id="1-单一线程原则"><a href="#1-单一线程原则" class="headerlink" title="1. 单一线程原则"></a>1. 单一线程原则</h4><blockquote><p>Single Thread rule</p></blockquote><p>在一个线程内，在程序前面的操作先行发生于后面的操作。</p><p><img                       lazyload                     alt="image"                     data-src="https://pchaoo.gitee.io/blog/img/pics/single-thread-rule.png"                      alt="image"                ></p><h4 id="2-管程锁定规则"><a href="#2-管程锁定规则" class="headerlink" title="2. 管程锁定规则"></a>2. 管程锁定规则</h4><blockquote><p>Monitor Lock Rule</p></blockquote><p>一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。</p><p><img                       lazyload                     alt="image"                     data-src="https://pchaoo.gitee.io/blog/img/pics/monitor-lock-rule.png"                      alt="image"                ></p><h4 id="3-volatile-变量规则"><a href="#3-volatile-变量规则" class="headerlink" title="3. volatile 变量规则"></a>3. volatile 变量规则</h4><blockquote><p>Volatile Variable Rule</p></blockquote><p>对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。</p><p><img                       lazyload                     alt="image"                     data-src="https://pchaoo.gitee.io/blog/img/pics/volatile-variable-rule.png"                      alt="image"                ></p><h4 id="4-线程启动规则"><a href="#4-线程启动规则" class="headerlink" title="4. 线程启动规则"></a>4. 线程启动规则</h4><blockquote><p>Thread Start Rule</p></blockquote><p>Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。</p><p><img                       lazyload                     alt="image"                     data-src="https://pchaoo.gitee.io/blog/img/pics/thread-start-rule.png"                      alt="image"                ></p><h4 id="5-线程加入规则"><a href="#5-线程加入规则" class="headerlink" title="5. 线程加入规则"></a>5. 线程加入规则</h4><blockquote><p>Thread Join Rule</p></blockquote><p>Thread 对象的结束先行发生于 join() 方法返回。</p><p><img                       lazyload                     alt="image"                     data-src="https://pchaoo.gitee.io/blog/img/pics/thread-join-rule.png"                      alt="image"                ></p><h4 id="6-线程中断规则"><a href="#6-线程中断规则" class="headerlink" title="6. 线程中断规则"></a>6. 线程中断规则</h4><blockquote><p>Thread Interruption Rule</p></blockquote><p>对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。</p><h4 id="7-对象终结规则"><a href="#7-对象终结规则" class="headerlink" title="7. 对象终结规则"></a>7. 对象终结规则</h4><blockquote><p>Finalizer Rule</p></blockquote><p>一个对象的初始化完成(构造函数执行结束)先行发生于它的 finalize() 方法的开始。</p><h4 id="8-传递性"><a href="#8-传递性" class="headerlink" title="8. 传递性"></a>8. 传递性</h4><blockquote><p>Transitivity</p></blockquote><p>如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。</p><h2 id="线程安全-不是一个非真即假的命题"><a href="#线程安全-不是一个非真即假的命题" class="headerlink" title="线程安全: 不是一个非真即假的命题"></a>线程安全: 不是一个非真即假的命题</h2><p>一个类在可以被多个线程安全调用时就是线程安全的。</p><p>线程安全不是一个非真即假的命题，可以将共享数据按照安全程度的强弱顺序分成以下五类: 不可变、绝对线程安全、相对线程安全、线程兼容和线程对立。</p><h3 id="1-不可变"><a href="#1-不可变" class="headerlink" title="1. 不可变"></a>1. 不可变</h3><p>不可变(Immutable)的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。只要一个不可变的对象被正确地构建出来，永远也不会看到它在多个线程之中处于不一致的状态。</p><p>多线程环境下，应当尽量使对象成为不可变，来满足线程安全。</p><p>不可变的类型:</p><ul><li>final 关键字修饰的基本数据类型</li><li>String</li><li>枚举类型</li><li>Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。但同为 Number 的原子类 AtomicInteger 和 AtomicLong 则是可变的。</li></ul><p>对于集合类型，可以使用 Collections.unmodifiableXXX() 方法来获取一个不可变的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, Integer&gt; unmodifiableMap = Collections.unmodifiableMap(map);</span><br><span class="line">        unmodifiableMap.put(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.UnsupportedOperationException</span><br><span class="line">    at java.util.Collections$UnmodifiableMap.put(Collections.java:<span class="number">1457</span>)</span><br><span class="line">    at ImmutableExample.main(ImmutableExample.java:<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>Collections.unmodifiableXXX() 先对原始的集合进行拷贝，需要对集合进行修改的方法都直接抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-绝对线程安全"><a href="#2-绝对线程安全" class="headerlink" title="2. 绝对线程安全"></a>2. 绝对线程安全</h3><p>不管运行时环境如何，调用者都不需要任何额外的同步措施。</p><h3 id="3-相对线程安全"><a href="#3-相对线程安全" class="headerlink" title="3. 相对线程安全"></a>3. 相对线程安全</h3><p>相对线程安全需要保证对这个对象单独的操作是线程安全的，在调用的时候不需要做额外的保障措施。但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。</p><p>在 Java 语言中，大部分的线程安全类都属于这种类型，例如 Vector、HashTable、Collections 的 synchronizedCollection() 方法包装的集合等。</p><p>对于下面的代码，如果删除元素的线程删除了 Vector 的一个元素，而获取元素的线程试图访问一个已经被删除的元素，那么就会抛出 ArrayIndexOutOfBoundsException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VectorUnsafeExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Vector&lt;Integer&gt; vector = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                vector.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">                    vector.remove(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">                    vector.get(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;Thread-159738&quot;</span> java.lang.ArrayIndexOutOfBoundsException: Array index out of range: <span class="number">3</span></span><br><span class="line">    at java.util.Vector.remove(Vector.java:<span class="number">831</span>)</span><br><span class="line">    at VectorUnsafeExample.lambda$main$<span class="number">0</span>(VectorUnsafeExample.java:<span class="number">14</span>)</span><br><span class="line">    at VectorUnsafeExample$$Lambda$<span class="number">1</span>/<span class="number">713338599.</span>run(Unknown Source)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br></pre></td></tr></table></figure><p>如果要保证上面的代码能正确执行下去，就需要对删除元素和获取元素的代码进行同步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (vector) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">            vector.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (vector) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">            vector.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-线程兼容"><a href="#4-线程兼容" class="headerlink" title="4. 线程兼容"></a>4. 线程兼容</h3><p>线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用，我们平常说一个类不是线程安全的，绝大多数时候指的是这一种情况。Java API 中大部分的类都是属于线程兼容的，如与前面的 Vector 和 HashTable 相对应的集合类 ArrayList 和 HashMap 等。</p><h3 id="5-线程对立"><a href="#5-线程对立" class="headerlink" title="5. 线程对立"></a>5. 线程对立</h3><p>线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。由于 Java 语言天生就具备多线程特性，线程对立这种排斥多线程的代码是很少出现的，而且通常都是有害的，应当尽量避免。</p><h2 id="线程安全的实现方法"><a href="#线程安全的实现方法" class="headerlink" title="线程安全的实现方法"></a>线程安全的实现方法</h2><h3 id="1-互斥同步"><a href="#1-互斥同步" class="headerlink" title="1. 互斥同步"></a>1. 互斥同步</h3><p>synchronized 和 ReentrantLock。</p><p>初步了解你可以看：</p><ul><li><a class="link"   href="https://pchaoo.gitee.io/blog/blog/md/java/thread/java-thread-x-thread-basic.html#%E7%BA%BF%E7%A8%8B%E4%BA%92%E6%96%A5%E5%90%8C%E6%AD%A5" >Java 并发 - 线程基础：线程互斥同步<i class="fas fa-external-link-alt"></i></a></li></ul><p>详细分析请看：</p><ul><li><a class="link"   href="https://pchaoo.gitee.io/blog/blog/md/java/thread/java-thread-x-key-synchronized.html" >关键字: Synchronized详解<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://pchaoo.gitee.io/blog/blog/md/java/thread/java-thread-x-lock-ReentrantLock.html" >JUC锁: ReentrantLock详解<i class="fas fa-external-link-alt"></i></a></li></ul><h3 id="2-非阻塞同步"><a href="#2-非阻塞同步" class="headerlink" title="2. 非阻塞同步"></a>2. 非阻塞同步</h3><p>互斥同步最主要的问题就是线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步。</p><p>互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施，那就肯定会出现问题。无论共享数据是否真的会出现竞争，它都要进行加锁(这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁)、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p><p><strong>(一)CAS</strong></p><p>随着硬件指令集的发展，我们可以使用基于冲突检测的乐观并发策略: 先进行操作，如果没有其它线程争用共享数据，那操作就成功了，否则采取补偿措施(不断地重试，直到成功为止)。这种乐观的并发策略的许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。</p><p>乐观锁需要操作和冲突检测这两个步骤具备原子性，这里就不能再使用互斥同步来保证了，只能靠硬件来完成。硬件支持的原子性操作最典型的是: 比较并交换(Compare-and-Swap，CAS)。CAS 指令需要有 3 个操作数，分别是内存地址 V、旧的预期值 A 和新值 B。当执行操作时，只有当 V 的值等于 A，才将 V 的值更新为 B。</p><p><strong>(二)AtomicInteger</strong></p><p>J.U.C 包里面的整数原子类 AtomicInteger，其中的 compareAndSet() 和 getAndIncrement() 等方法都使用了 Unsafe 类的 CAS 操作。</p><p>以下代码使用了 AtomicInteger 执行了自增的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    cnt.incrementAndGet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下代码是 incrementAndGet() 的源码，它调用了 unsafe 的 getAndAddInt() 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下代码是 getAndAddInt() 源码，var1 指示对象内存地址，var2 指示该字段相对对象内存地址的偏移，var4 指示操作需要加的数值，这里为 1。通过 getIntVolatile(var1, var2) 得到旧的预期值，通过调用 compareAndSwapInt() 来进行 CAS 比较，如果该字段内存地址中的值等于 var5，那么就更新内存地址为 var1+var2 的变量为 var5+var4。</p><p>可以看到 getAndAddInt() 在一个循环中进行，发生冲突的做法是不断的进行重试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(三)ABA</strong></p><p>如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有被改变过。</p><p>J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。</p><p>CAS, Unsafe和原子类详细分析请看：</p><ul><li><a class="link"   href="https://pchaoo.gitee.io/blog/blog/md/java/thread/java-thread-x-juc-AtomicInteger.html" >JUC原子类: CAS, Unsafe和原子类详解<i class="fas fa-external-link-alt"></i></a></li></ul><h3 id="3-无同步方案"><a href="#3-无同步方案" class="headerlink" title="3. 无同步方案"></a>3. 无同步方案</h3><p>要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。</p><p><strong>(一)栈封闭</strong></p><p>多个线程访问同一个方法的局部变量时，不会出现线程安全问题，因为局部变量存储在虚拟机栈中，属于线程私有的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackClosedExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add100</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StackClosedExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StackClosedExample</span>();</span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; example.add100());</span><br><span class="line">    executorService.execute(() -&gt; example.add100());</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>更详细的分析请看J.U.C中线程池相关内容详解：</p><ul><li><a class="link"   href="https://pchaoo.gitee.io/blog/blog/md/java/thread/java-thread-x-juc-executor-FutureTask.html" >JUC线程池: FutureTask详解<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://pchaoo.gitee.io/blog/blog/md/java/thread/java-thread-x-juc-executor-ThreadPoolExecutor.html" >JUC线程池: ThreadPoolExecutor详解<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://pchaoo.gitee.io/blog/blog/md/java/thread/java-thread-x-juc-executor-ScheduledThreadPoolExecutor.html" >JUC线程池: ScheduledThreadPool详解<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://pchaoo.gitee.io/blog/blog/md/java/thread/java-thread-x-juc-executor-ForkJoinPool.html" >JUC线程池: Fork&#x2F;Join框架详解<i class="fas fa-external-link-alt"></i></a></li></ul><p><strong>(二)线程本地存储(Thread Local Storage)</strong></p><p>如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。</p><p>符合这种特点的应用并不少见，大部分使用消费队列的架构模式(如“生产者-消费者”模式)都会将产品的消费过程尽量在一个线程中消费完。其中最重要的一个应用实例就是经典 Web 交互模型中的“一个请求对应一个服务器线程”(Thread-per-Request)的处理方式，这种处理方式的广泛应用使得很多 Web 服务端应用都可以使用线程本地存储来解决线程安全问题。</p><p>可以使用 java.lang.ThreadLocal 类来实现线程本地存储功能。</p><p>对于以下代码，thread1 中设置 threadLocal 为 1，而 thread2 设置 threadLocal 为 2。过了一段时间之后，thread1 读取 threadLocal 依然是 1，不受 thread2 的影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadLocal</span> <span class="variable">threadLocal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            threadLocal.set(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(threadLocal.get());</span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            threadLocal.set(<span class="number">2</span>);</span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>为了理解 ThreadLocal，先看以下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalExample1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadLocal</span> <span class="variable">threadLocal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line">        <span class="type">ThreadLocal</span> <span class="variable">threadLocal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(<span class="number">1</span>);</span><br><span class="line">            threadLocal2.set(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(<span class="number">2</span>);</span><br><span class="line">            threadLocal2.set(<span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它所对应的底层结构图为:</p><p><img                       lazyload                     alt="image"                     data-src="https://pchaoo.gitee.io/blog/img/pics/3646544a-cb57-451d-9e03-d3c4f5e4434a.png"                      alt="image"                ></p><p>每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象，Thread 类中就定义了 ThreadLocal.ThreadLocalMap 成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class="line"><span class="comment"> * by the ThreadLocal class. */</span></span><br><span class="line">ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">threadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>当调用一个 ThreadLocal 的 set(T value) 方法时，先得到当前线程的 ThreadLocalMap 对象，然后将 ThreadLocal-&gt;value 键值对插入到该 Map 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get() 方法类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ThreadLocal 从理论上讲并不是用来解决多线程并发问题的，因为根本不存在多线程竞争。</p><p>在一些场景 (尤其是使用线程池) 下，由于 ThreadLocal.ThreadLocalMap 的底层数据结构导致 ThreadLocal 有内存泄漏的情况，应该尽可能在每次使用 ThreadLocal 后手动调用 remove()，以避免出现 ThreadLocal 经典的内存泄漏甚至是造成自身业务混乱的风险。</p><p>更详细的分析看：<a class="link"   href="https://pchaoo.gitee.io/blog/blog/md/java/thread/java-thread-x-threadlocal.html" >Java 并发 - ThreadLocal详解<i class="fas fa-external-link-alt"></i></a></p><p><strong>(三)可重入代码(Reentrant Code)</strong></p><p>这种代码也叫做纯代码(Pure Code)，可以在代码执行的任何时刻中断它，转而去执行另外一段代码(包括递归调用它本身)，而在控制权返回后，原来的程序不会出现任何错误。</p><p>可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入、不调用非可重入的方法等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-并发-理论基础&quot;&gt;&lt;a href=&quot;#Java-并发-理论基础&quot; class=&quot;headerlink&quot; title=&quot;Java 并发 - 理论基础&quot;&gt;&lt;/a&gt;Java 并发 - 理论基础&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文从理论的角度引入并发安</summary>
      
    
    
    
    <category term="Java多线程" scheme="http://example.com/categories/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="Java高并发" scheme="http://example.com/tags/Java%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
</feed>
